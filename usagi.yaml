configens: !include configens.yaml
common:
  mis_database: &SQLALCHEMY mysql+pymysql://tmis:q1w2e3r4t5@127.0.0.1/hospital1_risar?charset=utf8
  cookie-domain: &COOKIE_DOMAIN 127.0.0.1
  celery_broker: &CELERY_BROKER_URL redis://localhost:6379/0  # redis://:password@hostname:port/db_number
  celery_result_backend: &CELERY_RESULT_BACKEND redis://localhost:6379/1
  # sql database for celery application task (CAT) info and results
  cat_database: &SQLALCHEMY_CAT mysql+pymysql://tmis:q1w2e3r4t5@127.0.0.1/celery_tasks_risar?charset=utf8

  system_user:
    uid: tmis
    gid: www-data

  sphinx: &SPHINX
    DB_TYPE: mysql
    DB_HOST: 127.0.0.1
    DB_PORT: 3306
    DB_NAME: hospital1_risar
    DB_USER: tmis
    DB_PASSWORD: q1w2e3r4t5
    SPHINXQL_PORT: &SPHINXQL_PORT 9306
    SPHINXQL_HOST: &SPHINXQL_HOST 127.0.0.1
    SPHINXQL_MAX_MATCHES: &SPHINXQL_MAX_MATCHES 10000
    INDEX_DATA_PATH: /var/lib/sphinxsearch/

  uwsgi_apps: &UWSGI_APPS
    CASTIEL_AUTH_TOKEN: &CASTIEL_AUTH_TOKEN CastielAuthToken  # authToken
    HIPPO_URL: &HIPPO_URL http://127.0.0.1:6600
    CAESAR_URL: &CAESAR_URL http://127.0.0.1:6601
    PRINT_SUBSYSTEM_URL: http://127.0.0.1:6601/print_subsystem/
    COLDSTAR_URL: &COLDSTAR_URL http://127.0.0.1:6605/
    SIMARGL_URL: *COLDSTAR_URL # по умолчанию запускаем Симаргл внутри Колдыря
    SCANSERVER_URL: *COLDSTAR_URL # сканер - тоже
    VESTA_URL: &VESTA_URL http://127.0.0.1:6603/api/
    TSUKINO_USAGI_URL: &TSUKINO_USAGI_URL http://127.0.0.1:6602
    SIMPLELOGS_URL: &SIMPLELOGS_URL http://127.0.0.1:6604
    DEVOURER_URL: &DEVOURER_URL http://127.0.0.1:6606
    IRON_URN_URL: &IRON_URN_URL http://127.0.0.1:6609
    SIRIUS_URL: &SIRIUS_URL http://127.0.0.1:8600

    SQLALCHEMY_TRACK_MODIFICATIONS: false
    SQLALCHEMY_ECHO: false

    MONGO_HOST: 127.0.0.1
    MONGO_PORT: 27017
    MONGO_USERNAME: ''
    MONGO_PASSWORD: ''
    MONGO_DBNAME: nvesta

  user_apps: &USER_APPS
    TRFU_URL: ""
    WEBMIS10_URL: ""
    SEARCHD_CONNECTION: &SEARCHD_CONNECTION
      host: *SPHINXQL_HOST
      port: *SPHINXQL_PORT

    DEBUG: True
    PROFILE: False
    TITLE: WebMIS 2.0
    COPYRIGHT_COMPANY: БАРС Груп
    LPU_STYLE: ""
    ORGANISATION_INFIS_CODE: 500
    BABEL_DEFAULT_LOCALE: ru_RU
    TIME_ZONE: Europe/Moscow
    SQLALCHEMY_BINDS:
      celery_tasks: *SQLALCHEMY_CAT
    SIRIUS_ENABLED: false

    CELERY_ENABLED: false

    CELERY_BROKER_URL: *CELERY_BROKER_URL
    CELERY_RESULT_BACKEND: *CELERY_RESULT_BACKEND

    CELERY_RESULT_SERIALIZER: json
    CELERY_ENABLE_UTC: true
    CELERY_TIMEZONE: Europe/Moscow
    CELERYD_CONCURRENCY: 2
    CELERY_TASK_RESULT_EXPIRES: 259200  # in seconds, default 1 day

    FILE_STORAGE_PATH: &FILE_STORAGE_PATH '/tmp'

    external_cas:
      enabled: false
      ext_cookie_name: &EXT_COOKIE_NAME TGT-CAS

  # Блок с настройками AMQP для интеграции ТМИС со внешними подсистемами
  amqp: &AMQP
    # Настройки соединения с сервером
    server: &AMQP_SERVER
      host: 127.0.0.1
      port: 5672
      managementPort: 15672
      virtualHost: "/"
    # Список пользователей  [префикс yaml-якорей AMQP_U_*]
    users:
      - &AMQP_U_ADMIN
        username: "guest"
        password: "guest"
        virtualHost: "/"
        tags:
          - administrator
      - &AMQP_U_FINANCE
        username: "tmis_finance"
        password: "rabbitrules!"
        virtualHost: "/"
        tags:
          - administrator
          - monitoring
        permissions:
          - vhost: "/"
            conf:  ".*"
            write: ".*"
            read:  ".*"
      - &AMQP_U_1C_PHARMACY
        username: '1c_pharmacy'
        password: 'mq_pharmacy'
        tags: []
        permissions:
          - vhost: '/'
            conf:  ''
            write: '^exchange\.(1c_pharmacy\..*|tmis\.hospitalization|tmis\.medical_prescription)$'
            read:  '^queue\.tmis\.1c_pharmacy\..*$'
      - &AMQP_U_BIOMATERIAL
        username: "tmis_biomaterial"
        password: "blood_and_faeces"
        tags: []
        permissions:
          - vhost: '/'
            conf:  ''
            write: '^exchange\.(tmis\.biological_material|integration\.laboratory)$'
            read:  '^queue\.(integration\.laboratory|tmis\.biological_material)\..*$'
    amqp_url: &AMQP_URL amqp://guest:guest@localhost:5672//
    admin: *AMQP_U_ADMIN
    # Список обменников [префикс yaml-якорей AMQP_E_*]
    exchanges:
      # Обменник для работы со счетами (ТМИС-1С финансы)
      - name: &AMQP_E_INVOICE                              exchange.tmis.finance.invoice
        type: x-delayed-message
        durable: true
        auto_delete: false
        arguments:
          x-delayed-type: topic
      # Обменник для работы с госпитализациями
      - name: &AMQP_E_HOSPITALIZATION                      exchange.tmis.hospitalization
        type: x-delayed-message
        durable: true
        auto_delete: false
        arguments:
          x-delayed-type: topic
      # Обменник для работы с Лекарственными Назначениями (ЛН)
      - name: &AMQP_E_MEDICAL_PRESCRIPTION                 exchange.tmis.medical_prescription
        type: x-delayed-message
        durable: true
        auto_delete: false
        arguments:
          x-delayed-type: topic
      # Обменник для работы с Биоматериалами (для ТМИС)
      - name: &AMQP_E_BIOMATERIAL                          exchange.tmis.biological_material
        type: topic
        durable: true
        auto_delete: false
      # Обменник для работы с Лабораториями (Интеграция с ЛИСАми)
      - name: &AMQP_E_LABORATORY                           exchange.integration.laboratory
        type: topic
        durable: true
        auto_delete: false
    # Список очередей [префикс yaml-якорей AMQP_Q_*]
    queues:
      - name: &AMQP_Q_INVOICE_CREATED                      queue.tmis.finance.invoice.created
        durable: true
        auto_delete: false
      - name: &AMQP_Q_INVOICE_DELETED                      queue.tmis.finance.invoice.deleted
        durable: true
        auto_delete: false
      - name: &AMQP_Q_INVOICE_REFUND                       queue.tmis.finance.invoice.refund
        durable: true
        auto_delete: false
      - name: &AMQP_Q_INVOICE_UPDATE                       queue.tmis.finance.invoice.updated
        durable: true
        auto_delete: false
        arguments:
          x-message-ttl: 120000
      - name: &AMQP_Q_INVOICE_ERROR                        queue.tmis.finance.invoice.error
        durable: true
        auto_delete: false
      # Интеграция ТМИС Госпитализации - 1С Аптека
      - name: &AMQP_Q_HOSPITALIZATION_1C_PHARMACY          queue.tmis.1c_pharmacy.hospitalization
        durable: true
        auto_delete: false
      - name: &AMQP_Q_HOSPITALIZATION_1C_PHARMACY_ERROR    queue.tmis.1c_pharmacy.hospitalization.error
        durable: true
        auto_delete: false
      # Интеграция ТМИС Листы Назначений - 1С Аптека
      - name: &AMQP_Q_MEDICAL_PRESCRIPTION_1C_PHARMACY     queue.tmis.1c_pharmacy.medical_prescription
        durable: true
        auto_delete: false
      - name: &AMQP_Q_MEDICAL_PRESCRIPTION_1C_PHARMACY_ERROR queue.tmis.1c_pharmacy.medical_prescription.error
        durable: true
        auto_delete: false
      # Интеграция ТМИС Биоматериалы 
      - name: &AMQP_Q_BIOMATERIAL_REQUEST                  queue.tmis.biological_material.request
        durable: true
        auto_delete: false
        arguments:
          x-message-ttl: 3600000
          x-dead-letter-exchange: *AMQP_E_BIOMATERIAL
          x-dead-letter-routing-key: expire
      - name: &AMQP_Q_BIOMATERIAL_RESPONSE                 queue.tmis.biological_material.response
        durable: true
        auto_delete: false
        arguments:
          x-message-ttl: 86400000
      # Интеграция с ЛИСами
      - name: &AMQP_Q_LABORATORY_HEPA                      queue.integration.laboratory.hepa
        durable: true
        auto_delete: false
        arguments:
          x-message-ttl: 3600000
          x-dead-letter-exchange: *AMQP_E_LABORATORY
          x-dead-letter-routing-key: expire
      - name: &AMQP_Q_LABORATORY_INNOVA                    queue.integration.laboratory.innova
        durable: true
        auto_delete: false
        arguments:
          x-message-ttl: 3600000
          x-dead-letter-exchange: *AMQP_E_LABORATORY
          x-dead-letter-routing-key: expire
      - name: &AMQP_Q_LABORATORY_RESULT                    queue.integration.laboratory.response
        durable: true
        auto_delete: false
        arguments:
          x-message-ttl: 3600000
    # Связки между обменниками и очередями с использованием текстового ключа [префикс yaml-якорей AMQP_B_*]
    bindings:
      # Invoice bindings
      - &AMQP_B_INVOICE_CREATE
        exchange:     *AMQP_E_INVOICE
        queue:        *AMQP_Q_INVOICE_CREATED
        routing_key:  create
      - &AMQP_B_INVOICE_DELETE
        exchange:     *AMQP_E_INVOICE
        queue:        *AMQP_Q_INVOICE_DELETED
        routing_key:  delete
      - &AMQP_B_INVOICE_REFUND
        exchange:     *AMQP_E_INVOICE
        queue:        *AMQP_Q_INVOICE_REFUND
        routing_key:  refund
      - &AMQP_B_INVOICE_UPDATE
        exchange:     *AMQP_E_INVOICE
        queue:        *AMQP_Q_INVOICE_UPDATE
        routing_key:  update
      - &AMQP_B_INVOICE_ERROR
        exchange:     *AMQP_E_INVOICE
        queue:        *AMQP_Q_INVOICE_ERROR
        routing_key:  error
      # Интеграция ТМИС Госпитализации - 1С Аптека
      - &AMQP_B_HOSPITALIZATION_CREATE
        exchange:     *AMQP_E_HOSPITALIZATION
        queue:        *AMQP_Q_HOSPITALIZATION_1C_PHARMACY
        routing_key:  create
      - &AMQP_B_HOSPITALIZATION_CLOSE
        exchange:     *AMQP_E_HOSPITALIZATION
        queue:        *AMQP_Q_HOSPITALIZATION_1C_PHARMACY
        routing_key:  close
      - &AMQP_B_HOSPITALIZATION_MOVING
        exchange:     *AMQP_E_HOSPITALIZATION
        queue:        *AMQP_Q_HOSPITALIZATION_1C_PHARMACY
        routing_key:  moving
      - &AMQP_B_HOSPITALIZATION_ERROR
        exchange:     *AMQP_E_HOSPITALIZATION
        queue:        *AMQP_Q_HOSPITALIZATION_1C_PHARMACY_ERROR
        routing_key:  error
      # Интеграция ТМИС Листы Назначений - 1С Аптека
      - &AMQP_B_MEDICAL_PRESCRIPTION_CREATE
        exchange:     *AMQP_E_MEDICAL_PRESCRIPTION
        queue:        *AMQP_Q_MEDICAL_PRESCRIPTION_1C_PHARMACY
        routing_key:  create
      - &AMQP_B_MEDICAL_PRESCRIPTION_CLOSE
        exchange:     *AMQP_E_MEDICAL_PRESCRIPTION
        queue:        *AMQP_Q_MEDICAL_PRESCRIPTION_1C_PHARMACY
        routing_key:  close
      - &AMQP_B_MEDICAL_PRESCRIPTION_ERROR
        exchange:     *AMQP_E_MEDICAL_PRESCRIPTION
        queue:        *AMQP_Q_MEDICAL_PRESCRIPTION_1C_PHARMACY_ERROR
        routing_key:  error
      # Интеграция ТМИС Биоматериалы
      - &AMQP_B_BIOMATERIAL_SEND
        exchange:     *AMQP_E_BIOMATERIAL
        queue:        *AMQP_Q_BIOMATERIAL_REQUEST
        routing_key:  send
      - &AMQP_B_BIOMATERIAL_RESEND
        exchange:     *AMQP_E_BIOMATERIAL
        queue:        *AMQP_Q_BIOMATERIAL_REQUEST
        routing_key:  resend
      - &AMQP_B_BIOMATERIAL_EXPIRE
        exchange:     *AMQP_E_BIOMATERIAL
        queue:        *AMQP_Q_BIOMATERIAL_RESPONSE
        routing_key:  expire
      - &AMQP_B_BIOMATERIAL_ERROR
        exchange:     *AMQP_E_BIOMATERIAL
        queue:        *AMQP_Q_BIOMATERIAL_RESPONSE
        routing_key:  error
      - &AMQP_B_BIOMATERIAL_NOT_ASSIGNED
        exchange:     *AMQP_E_BIOMATERIAL
        queue:        *AMQP_Q_BIOMATERIAL_RESPONSE
        routing_key:  not_assigned
      - &AMQP_B_BIOMATERIAL_SENT
        exchange:     *AMQP_E_BIOMATERIAL
        queue:        *AMQP_Q_BIOMATERIAL_RESPONSE
        routing_key:  sent
      - &AMQP_B_BIOMATERIAL_WAIT
        exchange:     *AMQP_E_BIOMATERIAL
        queue:        *AMQP_Q_BIOMATERIAL_RESPONSE
        routing_key:  wait
      # Интеграция с ЛИСами
      - &AMQP_B_LIS_HEPA_SEND
        exchange:     *AMQP_E_LABORATORY
        queue:        *AMQP_Q_LABORATORY_HEPA
        routing_key:  send.hepa
      - &AMQP_B_LIS_HEPA_RESEND
        exchange:     *AMQP_E_LABORATORY
        queue:        *AMQP_Q_LABORATORY_HEPA
        routing_key:  resend.hepa
      - &AMQP_B_LIS_INNOVA_SEND
        exchange:     *AMQP_E_LABORATORY
        queue:        *AMQP_Q_LABORATORY_INNOVA
        routing_key:  send.innova
      - &AMQP_B_LIS_INNOVA_RESEND
        exchange:     *AMQP_E_LABORATORY
        queue:        *AMQP_Q_LABORATORY_INNOVA
        routing_key:  resend.innova
      - &AMQP_B_LIS_ERROR
        exchange:     *AMQP_E_LABORATORY
        queue:        *AMQP_Q_LABORATORY_RESULT
        routing_key:  error
      - &AMQP_B_LIS_EXPIRE
        exchange:     *AMQP_E_LABORATORY
        queue:        *AMQP_Q_LABORATORY_RESULT
        routing_key:  expire
      - &AMQP_B_LIS_SENT
        exchange:     *AMQP_E_LABORATORY
        queue:        *AMQP_Q_LABORATORY_RESULT
        routing_key:  sent

  system_prefs: &SYSTEM_PREFS
    # режим работы 1-стандартный, 2+ - различные интеграции. См. enum SystemMode
    mode: 1
    # КЛАДР коды регионов, в которых работает система
    # RISAR_REGIONS: []
    #  - '58000000000'
    #  - '78000000000'
    integration:
      BARS_MIS_URL: http://127.0.0.1
      # Внешний url для записи пациентов на прием, если не задан, то берется внутренний url
      external_schedule_url:
      client:
        document_required: false
    ui:
      # angularjs блокирует ссылки с протоколами, которые не относятся к разрешенным
      # frontend_additional_href_protocols: ''
      ttj_barcode_len:
      extended_search:
        common_access_curator:
        common_access_doctor:
    regional:
      uses_regional_services: false
      close_yesterday_checkups: false

deployment:
  base_dir: .
  prefix: infra

subsystems:

  # Пользовательские подсистемы

  hippo: # Гиппократ (амбулатория)
    configens:
      uwsgi:
        template: "{{ configens.uwsgi.templates.basic | recurse }}"
        ext: |
          processes=4
          lazy-apps=true

          mule
          mule
          pythonpath={{ deployment.base_dir }}/code/hippocrates
          pythonpath={{ deployment.base_dir }}/code/hippocrates/hippocrates

          module=wsgi_risar
          callable=app
      nginx:
        port: 6600
        template: "{{ configens.nginx.templates.uwsgi | recurse }}"
        prepend: |
          uwsgi_cache_path /var/cache/nginx/{{ deployment.prefix }}/ levels=1:2 keys_zone={{ deployment.prefix }}_hippo:100m inactive=120m max_size=200M;
        ext: |
          location /static/ {
            alias {{ deployment.base_dir }}/venv/src/nemesis/nemesis/static/;
          }

          location /api/rb/ {
              uwsgi_cache {{ deployment.prefix }}_hippo;
              uwsgi_cache_bypass $http_pragma;
              uwsgi_cache_valid 200 301 302 304 5m;
              uwsgi_cache_key "$request_method|$http_if_modified_since|$http_if_none_match|$host|$request_uri";
              uwsgi_hide_header "Set-Cookie";
              uwsgi_ignore_headers "Cache-Control" "Expires" "Set-Cookie" "X-Accel-Expires";
              uwsgi_cache_use_stale error timeout invalid_header updating;
              expires 1h;

              add_header Pragma public;

              add_header Debug-Status $upstream_cache_status;
              add_header Debug-Expires $upstream_http_expires;
              add_header Debug-Cache-Control $upstream_http_cache_control;

              include uwsgi_params;
              uwsgi_pass unix://{{ deployment.base_dir }}/uwsgi/{{ this.name }}.uwsgi.sock;
              uwsgi_buffers 8 128k;
          }

    app: !inherit
      ancestors:
        - *UWSGI_APPS
        - *USER_APPS

      SQLALCHEMY_DATABASE_URI: *SQLALCHEMY
      SPHINXQL_MAX_MATCHES: *SPHINXQL_MAX_MATCHES
      PROJECT_NAME: Hippocrates
      TITLE: "БАРС.МР"
      INDEX_HTML: hippo_index.html
      DEFAULT_ENDPOINT: risar.index_html
      CACHE_TYPE: filesystem
      CACHE_DIR: /tmp/cache/hippo
      BEAKER_SESSION:
        session.type: file
        session.data_dir: /tmp/session/data
        session.lock_dir: /tmp/session/lock
        session.key: hippocrates.session.id
      WSF_CSRF_ENABLED: True
      SECRET_KEY: "Жил бы цитрус в чаще юга? Да! Но фальшивый экземпляр."

      RISAR_REGIONS:  # КЛАДР коды регионов, в которых работает система
        - '58000000000'
      PHARMEXPERT_URL: ''  # 'http://umkb.socmedica.com'
      PHARMEXPERT_SECURITY_KEY: ''

      JASPER_URL: 'http://10.1.2.11:8080/jasperserver'
      JASPER_LOGIN: 'jasperadmin'
      JASPER_PASSWORD: ''

      system_prefs: *SYSTEM_PREFS
      files_upload:
        max_file_size: 10MB
        # Пример pattern: ".pdf,.bmp,.jpg,.jpeg,.png,.tiff,.gif,.psd"
        pattern: ""

      AMQP_INTEGRATIONS:
        amqp_url: *AMQP_URL
        bindings:
          invoice:
            create: *AMQP_B_INVOICE_CREATE
            delete: *AMQP_B_INVOICE_DELETE
            refund: *AMQP_B_INVOICE_REFUND
            update: *AMQP_B_INVOICE_UPDATE
          hosp:
            create: *AMQP_B_HOSPITALIZATION_CREATE
            close: *AMQP_B_HOSPITALIZATION_CLOSE
            moving: *AMQP_B_HOSPITALIZATION_MOVING
          med_prescription:
            create: *AMQP_B_MEDICAL_PRESCRIPTION_CREATE
            close: *AMQP_B_MEDICAL_PRESCRIPTION_CLOSE
          biomaterial:
            send: *AMQP_B_BIOMATERIAL_SEND

    url: *HIPPO_URL

  caesar: # Администрирование и подсистема печати
    configens:
      uwsgi:
        template: "{{ configens.uwsgi.templates.basic | recurse }}"
        ext: |
          processes=4
          lazy-apps=true

          mule
          mule
          pythonpath={{ deployment.base_dir }}/code/caesar
          pythonpath={{ deployment.base_dir }}/code/caesar/caesar

          module=wsgi
          callable=app
      nginx:
        port: 6601
        template: "{{ configens.nginx.templates.uwsgi | recurse }}"
        ext: |
          location /static/ {
            alias {{ deployment.base_dir }}/venv/src/nemesis/nemesis/static/;
          }

          location /print_subsystem/fonts/ {
            add_header Access-Control-Allow-Origin *;
            alias {{ deployment.base_dir }}/code/caesar/caesar/blueprints/print_subsystem/static/;
          }

    app: !inherit
      ancestors:
        - *UWSGI_APPS
        - *USER_APPS

      SQLALCHEMY_DATABASE_URI: *SQLALCHEMY
      PROJECT_NAME: Caesar
      TITLE: Администрирование МИС
      INDEX_HTML: caesar_index.html
      BEAKER_SESSION:
        session.type: file
        session.data_dir: /tmp/session/data
        session.lock_dir: /tmp/session/lock
        session.key: caesar.session.id
      WSF_CSRF_ENABLED: True
      SECRET_KEY: "A quick brown fox jumps over a lazy dog"
    url: *CAESAR_URL

  # Внутренние подсистемы

  tsukino_usagi: # Подсистема конфигурирования подсистем
    configens:
      uwsgi:
        template: "{{ configens.uwsgi.templates.basic | recurse }}"
        ext: |
          processes=1

          env=TSUKINO_USAGI_CONFIG={{ deployment.config_path }}

          module=tsukino_usagi.wsgi
          callable=app
      nginx:
        port: 6602
        template: "{{ configens.nginx.templates.uwsgi | recurse }}"
        ext:
    app: !inherit
      ancestors:
        - *UWSGI_APPS
      DEBUG: True
      CACHE_TYPE: simple
    url: *TSUKINO_USAGI_URL

  vesta: # Подсистема справочников
    configens:
      uwsgi:
        template: "{{ configens.uwsgi.templates.basic | recurse }}"
        ext: |
          processes=2
          lazy-apps=true

          module=nvesta.wsgi
          callable=app
      nginx:
        port: 6603
        template: "{{ configens.nginx.templates.uwsgi | recurse }}"
        ext: |
          location /static/ {
            alias {{ deployment.base_dir }}/venv/lib/python2.7/site-packages/nvesta/static/;
          }

    app: !inherit
      ancestors:
        - *UWSGI_APPS

      MONGO_DBNAME: nvesta
      SIMPLELOGS_URL: *SIMPLELOGS_URL
      NSI_SOAP: http://nsi.rosminzdrav.ru/wsdl/SOAP-server.v2.php?wsdl
      NSI_TOKEN: ''

      CACHE_TYPE: 'null'
    url: *VESTA_URL

  simplelogs: # Подсистема журналирования
    configens:
      uwsgi:
        template: "{{ configens.uwsgi.templates.basic | recurse}}"
        ext: |
          processes=2
          lazy-apps=true

          module=simplelogs.wsgi
          callable=app

      nginx:
        port: 6604
        template: "{{ configens.nginx.templates.uwsgi | recurse }}"
        ext: |
          location /static/ {
            alias {{ deployment.base_dir }}/venv/lib/python2.7/site-packages/simplelogs/admin/static/;
          }

    app: !inherit
      ancestors:
        - *UWSGI_APPS
        - *USER_APPS
      DEBUG: True
      PROJECT_NAME: simplelogs
      TITLE: Подсистема журналирования
      BEAKER_SESSION:
        session.type: file
        session.data_dir: /tmp/session/data
        session.lock_dir: /tmp/session/lock
        session.key: simplelogs.session.id
      WSF_CSRF_ENABLED: True
      SECRET_KEY: "Жил бы цитрус в чаще юга? Да! Но фальшивый экземплярррище."
      SQLALCHEMY_DATABASE_URI: *SQLALCHEMY
      CACHE_TYPE: 'simple'

      MONGO_URI: mongodb://localhost/simplelogs
      SIMPLELOGS_COLLECTION: simplelogs
      SIMPLELOGS_LEVELS:
        - critical
        - error
        - warning
        - notice
        - info
        - debug

    url: *SIMPLELOGS_URL

  devourer: # Подсистема работы с файлами
    configens:
      uwsgi:
        template: "{{ configens.uwsgi.templates.basic | recurse }}"
        ext: |
          processes=2

          module=devourer.wsgi
          callable=app
      nginx:
        port: 6606
        template: "{{ configens.nginx.templates.uwsgi | recurse }}"
        ext: |
          location /protected_files {
              internal;
              alias {{ this.app.FILE_STORAGE_PATH }};
          }

          client_max_body_size {{ this.app.FILE_MAX_SIZE }};

    app: !inherit
      ancestors:
        - *UWSGI_APPS
        - *USER_APPS
      DEBUG: True
      SQLALCHEMY_DATABASE_URI: *SQLALCHEMY
      PROJECT_NAME: Devourer
      TITLE: Подсистема работы с файлами
      WSF_CSRF_ENABLED: True
      SECRET_KEY: "Жил бы цитрус в чаще юга? Да! Но фальшивый экземпляррр."
      FILE_STORAGE_PATH: *FILE_STORAGE_PATH
      FILE_MAX_SIZE: 10M
      CORS_ORIGINS:
        - *HIPPO_URL
        - *CAESAR_URL

    url: *DEVOURER_URL

  coldstar: # Подсистема всякой ерунды
    configens:
      supervisor:
        template: |
          [program:{{ deployment.prefix }}_{{ this.name }}]

          command={{ deployment.base_dir }}/venv/bin/twistd -n bouser --config {{ common.uwsgi_apps.TSUKINO_USAGI_URL }}/{{ this.name }}
          directory={{ deployment.base_dir }}
          stdout_logfile={{ deployment.base_dir }}/logs/{{ this.name }}.log
          stderr_logfile={{ deployment.base_dir }}/logs/{{ this.name }}.log
          autostart=true
          autorestart=true
          startsecs=3
          stopwaitsecs=6
          environment=VIRTUAL_ENV={{ deployment.base_dir }}/venv

          user={{ common.system_user.uid }}
          group={{ common.system_user.gid }}
      nginx:
        port: 6605
        template: |
          server {
            listen {{ this.configens.nginx.port }};

            rewrite_log on;
            autoindex on;
            access_log {{ deployment.base_dir }}/logs/{{ this.name }}-access.log;
            error_log  {{ deployment.base_dir }}/logs/{{ this.name }}-error.log;

            tcp_nodelay on;
            sendfile on;
            tcp_nopush on;

            gzip on;
            gzip_http_version 1.1;
            gzip_min_length  1100;
            gzip_disable "MSIE [1-6]\.(?!.*SV1)";
            gzip_vary on;
            gzip_proxied any;
            gzip_comp_level 6;
            gzip_buffers 16 8k;
            gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

            location / {
              proxy_pass http://127.0.0.1:6097/;
              include proxy_params;
              proxy_set_header Connection '';
              proxy_http_version 1.1;
              chunked_transfer_encoding off;
              proxy_buffering off;
              proxy_cache off;
              proxy_connect_timeout 600s;
              proxy_read_timeout 600s;
            }
          }

    app:
      module:
        bouser.ext.db: # База данных
          url: *SQLALCHEMY
        bouser.web: # Веб-интерфейс
          allowed-domains:
            - *HIPPO_URL
            - *CAESAR_URL
            - *COLDSTAR_URL
            - *DEVOURER_URL
          cors-domain: *HIPPO_URL
          strport: tcp:6097:127.0.0.1
        bouser.castiel: # Аутентификация
          cookie_name: *CASTIEL_AUTH_TOKEN
          cookie_domain: *COOKIE_DOMAIN
          clean_period: 10
          expiry_time: 3600
          domain_map: {}
#        bouser_hitsl.external_castiel: # Аутентификация
#          ext_url: ''
#          self_url: *COLDSTAR_URL
#          cookie_name: *CASTIEL_AUTH_TOKEN
#          cookie_domain: *COOKIE_DOMAIN
#          ext_cookie_name: *EXT_COOKIE_NAME
#          clean_period: 10
#          expiry_time: 3600
#          domain_map: {}
        bouser_simplelogs:
          url: *SIMPLELOGS_URL
        bouser.ext.hitsl.castiel.auth.mis: # Адаптер аутентификации для ТМИС
#        bouser.ext.hitsl.external_castiel.auth.mis: # Адаптер аутентификации для ТМИС

        bouser.ext.ezekiel: # Блокировки
          short_timeout: 25
        bouser.ext.ezekiel.eventsource:
          keep-alive: 60
        bouser.ext.ezekiel.rest:
        bouser.ext.ezekiel.web:
#        bouser.ext.ezekiel.ws:

        bouser.ext.hitsl.scanner: # Сканирование
        bouser.ext.hitsl.scanner.resource:

#        bouser.ext.hitsl.schedule_manager: # Задачи
#          mixins:
#            - bouser.ext.hitsl.errands.sm_task.errand_statuses

        bouser.ext.simargl: # Уведомления
          # config: /srv/infrastructure/simargl.conf
          config:
#            print:
#              module: bouser.ext.simargl.clients.console
            es:
              module: bouser.ext.simargl.clients.eventsource
            rpc:
              module: bouser.ext.simargl.clients.rpc
            db:
              module: bouser.ext.simargl.clients.db
            heartbeat:
              module: bouser.ext.simargl.clients.heartbeat
            mailer:
              module: bouser.ext.hitsl.simargl.clients.mailer
            errands:
              module: bouser.ext.hitsl.errands.simargl_client
            subscriptions:
              module: bouser.ext.hitsl.simargl.clients.user_subscriptions
#            sclient:
#              module: bouser.ext.simarg.simargl_client
#               host: localhost
#               port: 9667
#            sserver:
#              module: bouser.ext.simargl.simargl_server
#              host: localhost
#              port: 9667

        # bouser.ext.ws: # WebSockets

  maxwell: # Модуль связи РИСАР и интеграционной шины на RabbitMQ
    configens:
      supervisor:
        template: |
          [program:{{ deployment.prefix }}_{{ this.name }}]

          command={{ deployment.base_dir }}/venv/bin/twistd -n bouser --config {{ common.uwsgi_apps.TSUKINO_USAGI_URL }}/{{ this.name }}
          directory={{ deployment.base_dir }}
          stdout_logfile={{ deployment.base_dir }}/logs/{{ this.name }}.log
          stderr_logfile={{ deployment.base_dir }}/logs/{{ this.name }}.log
          autostart=true
          autorestart=true
          startsecs=3
          stopwaitsecs=6
          environment=VIRTUAL_ENV={{ deployment.base_dir }}/venv

          user={{ common.system_user.uid }}
          group={{ common.system_user.gid }}

    app:
      module:
        bouser.web: # Веб-интерфейс
          allowed-domains:
            - *HIPPO_URL
            - *CAESAR_URL
            - *COLDSTAR_URL
            - *DEVOURER_URL
          cors-domain: *HIPPO_URL
          strport: tcp:6609:127.0.0.1
        bouser_maxwell:
          amqp: {} # Здесь будут настройки соединения с RabbitMQ
          risar_url_root: http://localhost:6600/risar/api/integration  # корень интеграционного модуля в РИСАР

### Модуль с настройками для интеграции между ТМИС и 1С в части финансовых траназкций
  mq_integration_finance:
    app:
      amqp:
        server: *AMQP_SERVER
        user: *AMQP_U_FINANCE
        queue.created: *AMQP_Q_INVOICE_CREATED
        queue.deleted: *AMQP_Q_INVOICE_DELETED
        queue.refund: *AMQP_Q_INVOICE_REFUND
        error: *AMQP_B_INVOICE_ERROR
      webservice:
        url: "http://127.0.0.1/Mock_1Cwebservice?wsdl"
        targetNamespace: "http://schemas.xmlsoap.org/soap/envelope"
        name: "Exchange_MIS"

### Модуль с настройками для интеграции между ТМИС и 1С Аптекой в части госпитализаций
  mq_integration_pharmacy_hospitalization:
    app:
      amqp:
        server: *AMQP_SERVER
        user: *AMQP_U_1C_PHARMACY
        queue: *AMQP_Q_HOSPITALIZATION_1C_PHARMACY
        binding:
         create: *AMQP_B_HOSPITALIZATION_CREATE
         close: *AMQP_B_HOSPITALIZATION_CLOSE
         moving: *AMQP_B_HOSPITALIZATION_MOVING
        error: *AMQP_B_HOSPITALIZATION_ERROR
      webservice:
        url: "http://127.0.0.1/PharmacyHospitalization?wsdl"
        targetNamespace: "http://schemas.xmlsoap.org/soap/envelope"
        name: "PharmacyHospitalization"

### Модуль с настройками для интеграции между ТМИС и 1С Аптекой в части Листов Назначений (ЛН)
  mq_integration_pharmacy_medical_prescription:
    app:
      amqp:
        server: *AMQP_SERVER
        user: *AMQP_U_1C_PHARMACY
        queue: *AMQP_Q_MEDICAL_PRESCRIPTION_1C_PHARMACY
        error: *AMQP_B_MEDICAL_PRESCRIPTION_ERROR
      webservice:
        url: "http://127.0.0.1/PharmacyMedicalPrescription?wsdl"
        targetNamespace: "http://schemas.xmlsoap.org/soap/envelope"
        name: "PharmacyMedicalPrescription"

### Модуль с настройками для интеграции c Лабораториями
  mq_integration_biomaterial:
    app:
      amqp:
        server: *AMQP_SERVER
        user: *AMQP_U_BIOMATERIAL
        request:
          send: *AMQP_B_BIOMATERIAL_SEND
          resend: *AMQP_B_BIOMATERIAL_RESEND
        response:
          error: *AMQP_B_BIOMATERIAL_ERROR
          not_assigned: *AMQP_B_BIOMATERIAL_NOT_ASSIGNED
          sent: *AMQP_B_BIOMATERIAL_SENT
          wait: *AMQP_B_BIOMATERIAL_WAIT
        laboratoryResponse: *AMQP_B_LIS_SENT
      laboratories:
        HEPA: *AMQP_B_LIS_HEPA_SEND
        INNOVA: *AMQP_B_LIS_INNOVA_SEND
      datasource:
        host: 127.0.0.1
        port: 3306
        schema: laboratory_integration
        username: root
        password: root
        rdbms: mysql
        connectionProperties:
          # Значение лучше передавать строкой
          useUnicode: "true"
          characterEncoding: "UTF-8"
          characterSetResults: "UTF-8"
          serverTimezone: "UTC"

### Модуль интеграции с ЛИС-ХЕПА ДБ
  mq_integration_laboratory_hepa:
    app:
      amqp:
        server: *AMQP_SERVER
        user: *AMQP_U_BIOMATERIAL
        request:
          send: *AMQP_B_LIS_HEPA_SEND
        response:
          error: *AMQP_B_LIS_ERROR
          sent: *AMQP_B_LIS_SENT
      datasource:
        host: 127.0.0.1
        port: 3306
        schema: hepa
        username: root
        password: root
        rdbms: mysql
        connectionProperties:
          # Значение лучше передавать строкой
          useUnicode: "false"
          characterEncoding: "latin1"
          characterSetResults: "latin1"
      # Отделение по-умолчанию (если по коду не было найдено)
      defaultSoi:  "a1aec76c-ce03-4885-b666-49a57b15b42d"
      # Из под какого пользователя создавать заявки
      operator: "bars"
      # Настройки для отсылки результатов тестов в БД ТМИС
      polling:
        enabled: true
        cron: "0 * * * * ?"
        uploadPath: "http://127.0.0.1" #Перфикс к ссылкам (должно оканчиваться на слеш)
        actionPropertyTypeLinkSuffix: "_link"  #Суффикс кода APT для ссылок
        # Соединение с БД ТМИС (запись результатов напрямую, будет убрано когда-нибудь)
        datasourceHospital:
          host: 10.1.2.11
          port: 3306
          schema: gnc_160516
          username: root
          password: root
          rdbms: mysql
          connectionProperties:
           # Значение лучше передавать строкой
            useUnicode: "true"
            characterEncoding: "UTF-8"
            characterSetResults: "UTF-8"


  sphinx:
    configens:
      supervisor:
        template: |
          [program:{{ deployment.prefix }}_{{ this.name }}]

          directory={{ deployment.base_dir }}
          command=searchd --nodetach -c {{ deployment.base_dir }}/configs/sphinx/{{ deployment.prefix }}_sphinx.conf
          stdout_logfile={{ deployment.base_dir }}/logs/{{ this.name }}.log
          stderr_logfile={{ deployment.base_dir }}/logs/{{ this.name }}.log
          autostart=true
          autorestart=true
          startsecs=3
          stopwaitsecs=6

          user={{ common.system_user.uid }}
          group={{ common.system_user.gid }}
      sphinx:
        template: !readfile ./sphinx.j2

  crontab:
    configens:
      crontab:
        template: !readfile ./crontab.cron

  celery_worker:
    configens:
      supervisor:
        template: |
          ; ==================================
          ;  celery worker supervisor example
          ; ==================================

          [program:{{ deployment.prefix }}_{{ this.name }}]
          environment=PYTHONPATH={{ deployment.base_dir }}/code/hippocrates:{{ deployment.base_dir }}/code/hippocrates/hippocrates;TSUKINO_USAGI_URL={{ common.uwsgi_apps.TSUKINO_USAGI_URL }}
          command={{ deployment.base_dir }}/venv/bin/celery -A hippocrates.celery_worker worker --loglevel=INFO
          directory={{ deployment.base_dir }}

          numprocs=1
          stdout_logfile={{ deployment.base_dir }}/logs/{{ this.name }}.log
          stderr_logfile={{ deployment.base_dir }}/logs/{{ this.name }}.log
          autostart=true
          autorestart=true
          startsecs=10

          ; Need to wait for currently executing tasks to finish at shutdown.
          ; Increase this if you have very long running tasks.
          stopwaitsecs=300

          ; When resorting to send SIGKILL to the program to terminate it
          ; send SIGKILL to its whole process group instead,
          ; taking care of its children as well.
          killasgroup=true

          ; Set Celery priority higher than default (999)
          ; so, if rabbitmq (or other broker) is supervised, it will start first.
          priority=1000

          user={{ common.system_user.uid }}
          group={{ common.system_user.gid }}

  celerybeat:
    configens:
      supervisor:
        template: |
          ; ================================
          ;  celery beat supervisor example
          ; ================================

          [program:{{ deployment.prefix }}_{{ this.name }}]
          environment=PYTHONPATH={{ deployment.base_dir }}/code/hippocrates:{{ deployment.base_dir }}/code/hippocrates/hippocrates;TSUKINO_USAGI_URL={{ common.uwsgi_apps.TSUKINO_USAGI_URL }}
          command={{ deployment.base_dir }}/venv/bin/celery -A hippocrates.celery_worker beat --loglevel=INFO
          directory={{ deployment.base_dir }}

          numprocs=1
          stdout_logfile={{ deployment.base_dir }}/logs/{{ this.name }}.log
          stderr_logfile={{ deployment.base_dir }}/logs/{{ this.name }}.log
          autostart=true
          autorestart=true
          startsecs=10

          ; if rabbitmq (or other broker) is supervised, set its priority higher
          ; so it starts first
          priority=1001

          user={{ common.system_user.uid }}
          group={{ common.system_user.gid }}

  # Сгенерить скрипты для кролика
  rabbitmq:
    configens:
      shell:
        template: !readfile ./rabbitmq.sh
