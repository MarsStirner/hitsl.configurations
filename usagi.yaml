common:
  mis_database: &SQLALCHEMY mysql+cymysql://tmis:q1w2e3r4t5@127.0.0.1/hospital1_risar?charset=utf8

  sphinx: &SPHINX
    DB_TYPE: mysql
    DB_HOST: 127.0.0.1
    DB_PORT: 3306
    DB_NAME: hospital1_risar
    DB_USER: tmis
    DB_PASSWORD: q1w2e3r4t5
    SPHINXQL_PORT: &SPHINXQL_PORT 9306
    SPHINXQL_HOST: &SPHINXQL_HOST 127.0.0.1

  uwsgi_apps: &UWSGI_APPS
    CASTIEL_AUTH_TOKEN: &CASTIEL_AUTH_TOKEN CastielAuthToken  # authToken
    HIPPO_URL: &HIPPO_URL http://127.0.0.1:6600/
    CAESAR_URL: &CAESAR_URL http://127.0.0.1:6601/
    PRINT_SUBSYSTEM_URL: http://127.0.0.1:6601/print_subsystem/
    COLDSTAR_URL: &COLDSTAR_URL http://127.0.0.1:6605/
    SIMARGL_URL: *COLDSTAR_URL # по умолчанию запускаем Симаргл внутри Колдыря
    SCANSERVER_URL: *COLDSTAR_URL # сканер - тоже
    VESTA_URL: &VESTA_URL http://127.0.0.1:6603/
    TSUKINO_USAGI_URL: &TSUKINO_USAGI_URL http://127.0.0.1:6602/
    SIMPLELOGS_URL: &SIMPLELOGS_URL http://127.0.0.1:6604/
    IRON_URN_URL: &IRON_URN_URL http://127.0.0.1:6609/

    SQLALCHEMY_TRACK_MODIFICATIONS: false
    SQLALCHEMY_ECHO: false

  user_apps: &USER_APPS
    TRFU_URL: ""
    WEBMIS10_URL: ""
    SEARCHD_CONNECTION: &SEARCHD_CONNECTION
      host: *SPHINXQL_HOST
      port: *SPHINXQL_PORT

    DEBUG: True
    PROFILE: False
    TITLE: WebMIS 2.0
    COPYRIGHT_COMPANY: БАРС Груп
    LPU_STYLE: ""
    ORGANISATION_INFIS_CODE: 500
    BABEL_DEFAULT_LOCALE: ru_RU
    TIME_ZONE: Europe/Moscow
    CELERY_ENABLED: false


deployment:
  base_dir: /srv/infrastructure
  prefix: infra
  uwsgi_template: |
    [uwsgi]
    plugin = python
    virtualenv={{ deployment.base_dir }}/venv

    vacuum
    reaper

    pythonpath={{ deployment.base_dir }}/code/tsukino_usagi

    env=TSUKINO_USAGI_URL={{ common.uwsgi_apps.TSUKINO_USAGI_URL }}

    chdir     = {{ deployment.base_dir }}
    socket    = {{ deployment.base_dir }}/uwsgi/{{ this.name }}.uwsgi.sock
    pidfile2   = {{ deployment.base_dir }}/uwsgi/{{ this.name }}.pid
    logto     = {{ deployment.base_dir }}/logs/{{ this.name }}-uwsgi.log
    daemonize = {{ deployment.base_dir }}/logs/{{ this.name }}-uwsgi.log

    max-requests = 5000
    buffer-size = 32768
    harakiri = 120

    # set mode of created UNIX socket
    chmod-socket = 660

    # place timestamps into log
    log-date = true

    # user identifier of uWSGI processes
    uid = user_risar
    gid = user_risar

    {{ this.uwsgi.ext | recurse }}
  nginx_template_uwsgi: |
    {{ this.nginx.prepend | recurse }}
    server {
      listen {{ this.nginx.port }};
      rewrite_log on;
      access_log {{ deployment.base_dir }}/logs/{{ this.name }}-access.log;
      error_log  {{ deployment.base_dir }}/logs/{{ this.name }}-error.log;

      location / {
        uwsgi_cache_bypass 1;
        uwsgi_no_cache 1;
        include uwsgi_params;
        uwsgi_pass unix://{{ deployment.base_dir }}/uwsgi/{{ this.name }}.uwsgi.sock;
        uwsgi_buffers 8 128k;
        uwsgi_read_timeout 300;
        uwsgi_send_timeout 300;
      }

      location /static/ {
        alias {{ deployment.base_dir }}/venv/src/nemesis/nemesis/static/;
      }

      {{ this.nginx.ext | recurse }}

    }


subsystems:

  # Пользовательские подсистемы

  hippo: # Гиппократ (амбулатория)
    uwsgi:
      template: "{{ deployment.uwsgi_template | recurse }}"
      ext: |
        processes=4
        lazy-apps=true

        mule
        mule
        pythonpath={{ deployment.base_dir }}/code/hippocrates/hippocrates

        module=wsgi
        callable=app
    nginx:
      port: 6600
      template: "{{ deployment.nginx_template_uwsgi | recurse }}"
      prepend: |
        uwsgi_cache_path /var/cache/nginx/{{ deployment.prefix }}/ levels=1:2 keys_zone={{ deployment.prefix }}_hippo:100m inactive=120m max_size=200M;
      ext: |
        location /api/rb/ {
            uwsgi_cache {{ deployment.prefix }}_hippo;
            uwsgi_cache_bypass $http_pragma;
            uwsgi_cache_valid 200 301 302 304 5m;
            uwsgi_cache_key "$request_method|$http_if_modified_since|$http_if_none_match|$host|$request_uri";
            uwsgi_hide_header "Set-Cookie";
            uwsgi_ignore_headers "Cache-Control" "Expires" "Set-Cookie" "X-Accel-Expires";
            uwsgi_cache_use_stale error timeout invalid_header updating;
            expires 1h;

            add_header Pragma public;

            add_header Debug-Status $upstream_cache_status;
            add_header Debug-Expires $upstream_http_expires;
            add_header Debug-Cache-Control $upstream_http_cache_control;

            include uwsgi_params;
            uwsgi_pass unix://{{ deployment.base_dir }}/uwsgi/{{ this.name }}.uwsgi.sock;
            uwsgi_buffers 8 128k;
        }

    app: !inherit
      ancestors:
        - *UWSGI_APPS
        - *USER_APPS

      SQLALCHEMY_DATABASE_URI: *SQLALCHEMY
      PROJECT_NAME: Hippocrates
      TITLE: РИСАР
      INDEX_HTML: hippo_index.html
      # DEFAULT_ENDPOINT: risar.index_html
      BEAKER_SESSION:
        session.type: file
        session.data_dir: /tmp/session/data
        session.lock_dir: /tmp/session/lock
        session.key: hippocrates.session.id
      WSF_CSRF_ENABLED: True
      SECRET_KEY: "Жил бы цитрус в чаще юга? Да! Но фальшивый экземпляр."
    url: *HIPPO_URL

  caesar: # Администрирование и подсистема печати
    uwsgi:
      template: "{{ deployment.uwsgi_template | recurse }}"
      ext: |
        processes=4
        lazy-apps=true

        mule
        mule
        pythonpath={{ deployment.base_dir }}/code/caesar/caesar

        module=wsgi
        callable=app
    nginx:
      port: 6601
      template: "{{ deployment.nginx_template_uwsgi | recurse }}"
      ext: |
        location /print_subsystem/fonts/ {
          alias {{ deployment.base_dir }}/code/caesar/blueprints/print_subsystem/static/;
        }

    app: !inherit
      ancestors:
        - *UWSGI_APPS
        - *USER_APPS

      SQLALCHEMY_DATABASE_URI: *SQLALCHEMY
      PROJECT_NAME: Caesar
      TITLE: Caesar
      INDEX_HTML: caesar_index.html
      # DEFAULT_ENDPOINT: risar.index_html
      BEAKER_SESSION:
        session.type: file
        session.data_dir: /tmp/session/data
        session.lock_dir: /tmp/session/lock
        session.key: caesar.session.id
      WSF_CSRF_ENABLED: True
      SECRET_KEY: "A quick brown fox jumps over a lazy dog"
    url: *CAESAR_URL

  # Внутренние подсистемы

  tsukino_usagi: # Подсистема конфигурирования подсистем
    uwsgi:
      template: "{{ deployment.uwsgi_template | recurse }}"
      ext: |
        processes=1

        env=TSUKINO_USAGI_CONFIG={{ deployment.config_path }}
        # pythonpath={{ deployment.base_dir }}/code/tsukino_usagi

        module=tsukino_usagi.wsgi
        callable=app
    nginx:
      port: 6602
      template: "{{ deployment.nginx_template_uwsgi | recurse }}"
      ext:
    app: !inherit
      ancestors:
        - *UWSGI_APPS
      DEBUG: True
      CACHE_TYPE: simple
    url: *TSUKINO_USAGI_URL

#  iron_urn: # Подсистема разрешения URN
#    wsgi:
#      template: "{{ deployment.uwsgi_template }}"
#      ext: |
#        processes=1
#
#        pythonpath={{ deployment.base_dir }}/code/iron_urn
#
#        module=iron_urn.wsgi
#        callable=app
#    nginx:
#      port: 6609
#      template: "{{ deployment.nginx_template_uwsgi }}"
#    app: !inherit
#      ancestors:
#        - *UWSGI_APPS
#    url: *IRON_URN_URL

  vesta: # Подсистема справочников
    uwsgi:
      template: "{{ deployment.uwsgi_template | recurse }}"
      ext: |
        processes=2
        lazy-apps=true

        pythonpath={{ deployment.base_dir }}/code/nvesta

        module=nvesta.wsgi
        callable=app
    nginx:
      port: 6603
      template: "{{ deployment.nginx_template_uwsgi | recurse }}"
      ext:
    app: !inherit
      ancestors:
        - *UWSGI_APPS
      MONGO_HOST: 127.0.0.1
      MONGO_PORT: 27017
      MONGO_USERNAME: ''
      MONGO_PASSWORD: ''
      MONGO_DBNAME: nvesta

      SIMPLELOGS_URL: *SIMPLELOGS_URL
      NSI_SOAP: http://nsi.rosminzdrav.ru/wsdl/SOAP-server.v2.php?wsdl
      NSI_TOKEN: ''

      CACHE_TYPE: filesystem
      CACHE_DIR: /tmp/cache/nvesta
    url: *VESTA_URL

  simplelogs: # Подсистема журналирования
    uwsgi:
      template: "{{ deployment.uwsgi_template | recurse}}"
      ext: |
        processes=2
        lazy-apps=true

        pythonpath={{ deployment.base_dir }}/code/simplelogs

        module=simplelogs.wsgi
        callable=app

    nginx:
      port: 6604
      template: "{{ deployment.nginx_template_uwsgi | recurse }}"
      ext:

    app: !inherit
      ancestors:
        - *UWSGI_APPS

      MONGO_URI: mongodb://localhost/simplelogs
    url: *SIMPLELOGS_URL

  coldstar: # Подсистема всякой ерунды
    supervisor:
      template: |
        [program:{{ deployment.prefix }}_{{ this.name }}]

        command={{ deployment.base_dir }}/venv/bin/twistd -n bouser --config {{ common.uwsgi_apps.TSUKINO_USAGI_URL }}/{{ this.name }}
        directory={{ deployment.base_dir }}
        stdout_logfile={{ deployment.base_dir }}/logs/{{ this.name }}.log
        stderr_logfile={{ deployment.base_dir }}/logs/{{ this.name }}.log
        autostart=true
        autorestart=true
        startsecs=3
        stopwaitsecs=6
        environment=VIRTUAL_ENV={{ deployment.base_dir }}/venv

        user=tmis
        group=www-data
    nginx:
      port: 6605
      template: |
        server {
          listen {{ this.nginx.port }};

          rewrite_log on;
          autoindex on;
          access_log {{ deployment.base_dir }}/logs/{{ this.name }}-access.log;
          error_log  {{ deployment.base_dir }}/logs/{{ this.name }}-error.log;

          tcp_nodelay on;
          sendfile on;
          tcp_nopush on;

          gzip on;
          gzip_http_version 1.1;
          gzip_min_length  1100;
          gzip_disable "MSIE [1-6]\.(?!.*SV1)";
          gzip_vary on;
          gzip_proxied any;
          gzip_comp_level 6;
          gzip_buffers 16 8k;
          gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

          location / {
            proxy_pass http://localhost:6097/;
            include proxy_params;
            proxy_set_header Connection '';
            proxy_http_version 1.1;
            chunked_transfer_encoding off;
            proxy_buffering off;
            proxy_cache off;
            proxy_connect_timeout 600s;
            proxy_read_timeout 600s;
          }
        }

    app:
      module:
        bouser.ext.db: # База данных
          url: *SQLALCHEMY
        bouser.web: # Веб-интерфейс
          allowed-domains:
            - http://127.0.0.1:7998
            # - http://mis.hitsl.local:5000
          cors-domain: http://127.0.0.1:7998
          # host: 127.0.0.1
          # port: 5001
          # static-path: src/coldstar/web/static
          strport: tcp:6097:127.0.0.1
          # template-path: src/coldstar/web/templates
        bouser.castiel: # Аутентификация
          cookie_name: *CASTIEL_AUTH_TOKEN
          cookie_domain: 127.0.0.1
          clean_period: 10
          expiry_time: 3600
          domain_map: {}
        bouser.ext.hitsl.castiel.auth.mis: # Адаптер аутентификации для ТМИС

        bouser.ext.ezekiel: # Блокировки
          short_timeout: 25
        bouser.ext.ezekiel.eventsource:
          keep-alive: 60
        bouser.ext.ezekiel.rest:

        bouser.ext.hitsl.scanner: # Сканирование
        bouser.ext.hitsl.scanner.resource:

        bouser.ext.hitsl.schedule_manager: # Задачи
          mixins:
            - bouser.ext.hitsl.errands.sm_task.errand_statuses

        bouser.ext.simargl: # Уведомления
          # config: /srv/infrastructure/simargl.conf
          config:
            print:
              module: bouser.ext.simargl.clients.console
            es:
              module: bouser.ext.simargl.clients.eventsource
            rpc:
              module: bouser.ext.simargl.clients.rpc
            db:
              module: bouser.ext.simargl.clients.db
            heartbeat:
              module: bouser.ext.simargl.clients.heartbeat
            mailer:
              module: bouser.ext.hitsl.simargl.clients.mailer
            errands:
              module: bouser.ext.hitsl.errands.simargl_client
            subscriptions:
              module: bouser.ext.hitsl.simargl.clients.user_subscriptions
#            sclient:
#              module: bouser.ext.simarg.simargl_client
#               host: localhost
#               port: 9667
#            sserver:
#              module: bouser.ext.simargl.simargl_server
#              host: localhost
#              port: 9667

        # bouser.ext.ws: # WebSockets

  sphinx:
    supervisor:
      template: |
        [program:{{ deployment.prefix }}_{{ this.name }}]

        command={{ deployment.base_dir }}/venv/bin/twistd -n bouser --config {{ common.uwsgi_apps.TSUKINO_USAGI_URL }}/{{ this.name }}
        directory={{ deployment.base_dir }}
        stdout_logfile={{ deployment.base_dir }}/logs/{{ this.name }}.log
        stderr_logfile={{ deployment.base_dir }}/logs/{{ this.name }}.log
        autostart=true
        autorestart=true
        startsecs=3
        stopwaitsecs=6
        environment=VIRTUAL_ENV={{ deployment.base_dir }}/venv

        user=tmis
        group=www-data
    app:
      
    sphinx: 
      template: |
        #
        # Minimal Sphinx configuration sample (clean, simple, functional)
        #
        
        source person
        {
            type        = {{ common.sphinx.DB_TYPE }}
        
            sql_host    = {{ common.sphinx.DB_HOST }}
            sql_user    = {{ common.sphinx.DB_USER }}
            sql_pass    = {{ common.sphinx.DB_PASSWORD }}
            sql_db      = {{ common.sphinx.DB_NAME }}
            sql_port    = {{ common.sphinx.DB_PORT }}
        
        #   sql_query_pre = SET CHARACTER_SET_RESULTS=utf8
            sql_query_pre = SET NAMES utf8
            sql_query_pre = SET CHARACTER SET utf8
        
            sql_query       = \
                SELECT p.id, p.org_id, p.lastName, p.firstName, p.patrName, \
                    s.id as speciality_id, s.name as speciality, s.code as speciality_code, s.OKSOName, \
                    os.id as orgStructure_id, os.code as orgStructure_code, os.name as orgStructure \
                FROM Person p LEFT JOIN rbSpeciality s ON p.speciality_id = s.id \
                LEFT JOIN OrgStructure os ON p.orgStructure_id = os.id \
                WHERE p.deleted=0
        
            sql_attr_uint       = org_id
            sql_field_string    = lastName
            sql_field_string    = firstName
            sql_field_string    = patrName
            sql_attr_uint   = speciality_id
            sql_attr_string = speciality_code
            sql_field_string    = speciality
            sql_attr_uint   = orgStructure_id
            sql_attr_string = orgStructure_code
            sql_attr_string = orgStructure
        
            sql_query_info      = SELECT * FROM Person WHERE id=$id
        }
        
        
        index person
        {
            source          = person
            path            = /var/lib/sphinxsearch/data_{{ deployment.prefix }}/person
            docinfo         = extern
            charset_type        = utf-8
            min_word_len        = 2
            min_prefix_len      = 2
        
            # default are English and Russian letters
        #   charset_table = 0..9, A..Z->a..z, _, a..z, \
        #       U+410..U+42F->U+430..U+44F, U+430..U+44F, U+401->U+451, U+451
        
        #   morphology      = stem_enru
        #   enable_star     = 1
        }
        
        source patient
        {
                type        = {{ common.sphinx.DB_TYPE }}
        
                sql_host    = {{ common.sphinx.DB_HOST }}
                sql_user    = {{ common.sphinx.DB_USER }}
                sql_pass    = {{ common.sphinx.DB_PASSWORD }}
                sql_db      = {{ common.sphinx.DB_NAME }}
                sql_port    = {{ common.sphinx.DB_PORT }}
        
        #       sql_query_pre = SET CHARACTER_SET_RESULTS=utf8
                sql_query_pre = SET NAMES utf8
                sql_query_pre = SET CHARACTER SET utf8
        
                sql_query               = \
                        SELECT c.id as id, CAST(c.id AS CHAR) as code, c.lastName, c.firstName, c.patrName, c.SNILS, DATE_FORMAT(c.birthDate, '%d.%m.%Y') as birthDate_f1, DATE_FORMAT(c.birthDate, '%e.%m.%Y') as birthDate_f2, \
                        GROUP_CONCAT(CONCAT_WS(' ', cd.serial, cd.number) SEPARATOR '; ') as document, \
                        GROUP_CONCAT(CONCAT_WS(' ', cp.serial, cp.number) SEPARATOR '; ') as policy \
                        FROM Client c \
                        LEFT JOIN ClientDocument cd ON cd.client_id=c.id \
                        LEFT JOIN ClientPolicy cp ON cp.client_id=c.id \
                        GROUP BY c.id
        
                sql_field_string        = code
                sql_field_string        = lastName
                sql_field_string        = firstName
                sql_field_string        = patrName
                sql_query_info          = SELECT * FROM Client WHERE id=$id
        }
        
        
        index patient
        {
                source                  = patient
                path                    = /var/lib/sphinxsearch/data_{{ deployment.prefix }}/patient
                docinfo                 = extern
                charset_type            = utf-8
                min_word_len            = 2
                min_prefix_len           = 2
        
                ignore_chars = U+2E
                charset_table = 0..9, A..Z->a..z, _, a..z,  \
                   U+410..U+42F->U+430..U+44F, U+430..U+44F, U+401->U+451, U+451
        
        #       morphology              = stem_enru
        #       enable_star             = 1
        }
        
        #index testrt
        #{
        #   type            = rt
        #   rt_mem_limit        = 32M
        #
        #   path            = /var/lib/sphinxsearch/data/testrt
        #   charset_type        = utf-8
        #
        #   rt_field        = title
        #   rt_field        = content
        #   rt_attr_uint        = gid
        #}
        
        
        source event_service
        {
                type        = {{ common.sphinx.DB_TYPE }}
        
                sql_host    = {{ common.sphinx.DB_HOST }}
                sql_user    = {{ common.sphinx.DB_USER }}
                sql_pass    = {{ common.sphinx.DB_PASSWORD }}
                sql_db      = {{ common.sphinx.DB_NAME }}
                sql_port    = {{ common.sphinx.DB_PORT }}
        
        #       sql_query_pre = SET CHARACTER_SET_RESULTS=utf8
                sql_query_pre = SET NAMES utf8
                sql_query_pre = SET CHARACTER SET utf8
        
                sql_query_pre = SET @a := 1;
                sql_query = \
                    SELECT \
                        @a := @a + 1 AS id, \
                        pli.id as price_list_item_id, \
                        pli.service_id as service_id, \
                        pli.serviceCodeOW as service_code, \
                        pli.serviceNameOW as service_name, \
                        at.id as action_type_id, \
                        at.code as at_code, \
                        at.name as at_name, \
                        pl.id as pricelist_id, \
                        pli.price, \
                        pli.isAccumulativePrice as is_accumulative_price, \
                        s.isComplex as is_complex_service, \
                        (SELECT at.isRequiredTissue AND EXISTS ( \
                            SELECT * \
                            FROM ActionPropertyType \
                            WHERE actionType_id = at.id AND isAssignable = 1 AND deleted = 0) \
                        ) as is_at_lab \
                    FROM ActionType at \
                        INNER JOIN ActionType_Service ats ON ats.master_id=at.id AND (CURDATE() BETWEEN ats.begDate AND COALESCE(ats.endDate, CURDATE())) \
                        INNER JOIN EventType_Action e ON e.actionType_id=at.id \
                        INNER JOIN PriceListItem pli ON pli.service_id=ats.service_id \
                        INNER JOIN PriceList pl ON pli.priceList_id=pl.id \
                        INNER JOIN rbService s ON s.id=ats.service_id \
                    WHERE \
                        at.deleted=0 AND pli.deleted=0 AND pl.deleted=0 AND \
                        (CURDATE() BETWEEN pli.begDate AND pli.endDate) \
                    GROUP BY at.id, at.code, pl.id \
                    \
                    UNION  \
                    \
                    SELECT \
                        @a := @a + 1 AS id, \
                        pli.id as price_list_item_id, \
                        pli.service_id as service_id, \
                        pli.serviceCodeOW as service_code, \
                        pli.serviceNameOW as service_name, \
                        NULL as action_type_id, \
                        NULL as at_code, \
                        NULL as at_name, \
                        pl.id as pricelist_id, \
                        pli.price, \
                        pli.isAccumulativePrice as is_accumulative_price, \
                        s.isComplex as is_complex_service, \
                        NULL as is_at_lab \
                    FROM PriceListItem pli \
                        INNER JOIN PriceList pl ON pli.priceList_id=pl.id \
                        INNER JOIN rbService s ON pli.service_id=s.id \
                        LEFT JOIN ( \
                            SELECT at.id, ats.service_id \
                            FROM ActionType at \
                            INNER JOIN ActionType_Service ats ON ats.master_id=at.id AND (CURDATE() BETWEEN ats.begDate AND COALESCE(ats.endDate, CURDATE())) \
                            INNER JOIN EventType_Action e ON e.actionType_id=at.id \
                            WHERE at.deleted=0 \
                            GROUP BY at.id, ats.service_id \
                        ) at_with_services ON pli.service_id=at_with_services.service_id \
                    WHERE \
                        pli.deleted=0 AND pl.deleted=0 AND (CURDATE() BETWEEN pli.begDate AND pli.endDate) AND \
                        at_with_services.id IS NULL AND s.isComplex = 1
        
        
        #        -- GROUP_CONCAT(DISTINCT e.eventType_id SEPARATOR ',') as eventType_id, \
        #        -- IF(e.speciality_id, GROUP_CONCAT(DISTINCT e.speciality_id SEPARATOR ','), 0) as speciality_id, \
        
                sql_field_string    = service_code
                sql_field_string    = service_name
                sql_field_string    = at_code
                sql_field_string    = at_name
        
                sql_attr_uint       = price_list_item_id
                sql_attr_uint       = service_id
                sql_attr_uint       = action_type_id
                sql_attr_float      = price
                sql_attr_uint       = is_accumulative_price
                sql_attr_uint       = is_complex_service
                sql_attr_uint       = is_at_lab
                sql_attr_uint       = pricelist_id
        
        #       sql_attr_multi     = uint eventType_id from field
        #       sql_attr_multi     = uint speciality_id from field
        
        }
        
        
        index event_service
        {
                source                  = event_service
                path                    = /var/lib/sphinxsearch/data_{{ deployment.prefix }}/event_service
                docinfo                 = extern
                charset_type            = utf-8
                min_word_len            = 2
                min_prefix_len           = 2
        
                charset_table = 0..9, A..Z->a..z, _, a..z, U+2E, \
                   U+410..U+42F->U+430..U+44F, U+430..U+44F, U+401->U+451, U+451
        }
        
        
        source events
        {
                type        = {{ common.sphinx.DB_TYPE }}
        
                sql_host    = {{ common.sphinx.DB_HOST }}
                sql_user    = {{ common.sphinx.DB_USER }}
                sql_pass    = {{ common.sphinx.DB_PASSWORD }}
                sql_db      = {{ common.sphinx.DB_NAME }}
                sql_port    = {{ common.sphinx.DB_PORT }}
        
        #       sql_query_pre = SET CHARACTER_SET_RESULTS=utf8
                sql_query_pre = SET NAMES utf8
                sql_query_pre = SET CHARACTER SET utf8
        
                sql_query = \
                        SELECT \
                            Event.id, \
                            Event.externalId as external_id, \
                            CONCAT_WS(' ', Client.lastName, Client.firstName, Client.patrName) as client_name, \
                            Client.id as client_code, \
                            Client.birthDate as client_bd, \
                            Event.setDate as event_date \
                        FROM \
                            Event \
                            LEFT JOIN Person ON Person.id = Event.execPerson_id \
                            JOIN EventType ON Event.eventType_id = EventType.id \
                            JOIN rbRequestType ON EventType.requestType_id = rbRequestType.id \
                            JOIN Client on Client.id = Event.client_id \
                        WHERE Event.deleted = 0 \
                        GROUP BY Event.id
        
                sql_field_string      = external_id
                sql_field_string      = client_code
                sql_field_string      = client_name
                sql_field_string      = client_bd
        
                sql_attr_string       = event_date
        }
        
        
        index events
        {
                source                  = events
                path                    = /var/lib/sphinxsearch/data_{{ deployment.prefix }}/events
                docinfo                 = extern
                charset_type            = utf-8
                min_word_len            = 2
                min_prefix_len          = 2
        
                charset_table = 0..9, A..Z->a..z, _, /, a..z, U+2E, \
                   U+410..U+42F->U+430..U+44F, U+430..U+44F, U+401->U+451, U+451
        }
        
        
        
        source risar_events
        {
                type        = {{ common.sphinx.DB_TYPE }}
        
                sql_host    = {{ common.sphinx.DB_HOST }}
                sql_user    = {{ common.sphinx.DB_USER }}
                sql_pass    = {{ common.sphinx.DB_PASSWORD }}
                sql_db      = {{ common.sphinx.DB_NAME }}
                sql_port    = {{ common.sphinx.DB_PORT }}
        
        #       sql_query_pre = SET CHARACTER_SET_RESULTS=utf8
                sql_query_pre = SET NAMES utf8
                sql_query_pre = SET CHARACTER SET utf8
        
                sql_query               = \
                    SELECT\
                        Event.id,\
                        Event.externalId as external_id,\
                        Event.execPerson_id as exec_person_id,\
                        Event.client_id as client_id,\
                        UNIX_TIMESTAMP(DATE(Event.setDate)) as set_date,\
                        UNIX_TIMESTAMP(Event.modifyDatetime) as modify_date,\
                        UNIX_TIMESTAMP(DATE(Event.execDate)) as exec_date,\
                        Person.org_id as org_id,\
                        CAST(LEFT(Organisation.area, 5) AS UNSIGNED) as area,\
                        CONCAT_WS(' ', Client.lastName, Client.firstName, Client.patrName) as name,\
                        GROUP_CONCAT(DISTINCT CONCAT_WS(' ', ClientDocument.serial, ClientDocument.number) SEPARATOR '; ') as document,\
                        rbDocumentType.name as document_type,\
                        GROUP_CONCAT(DISTINCT CONCAT_WS(' ', rbPolicyType.name, ClientPolicy.serial, ClientPolicy.number) SEPARATOR '; ') as policy,\
                        Client.SNILS as snils,\
                        DATE_FORMAT(Client.birthDate, '%d.%m.%Y') as birth_date,\
                        CONCAT_WS(' ', Person.lastName, Person.firstName, Person.patrName) as person_name,\
                        apv_risk.value as risk,\
                        UNIX_TIMESTAMP(DATE(apv_bdate.value)) as bdate,\
                        UNIX_TIMESTAMP(DATE(apv_psdate.value))  as psdate,\
                        UNIX_TIMESTAMP(DATE(apv_modify_date.value)) as card_modify_date,\
                        GROUP_CONCAT(UNIX_TIMESTAMP(DATE(checkup.begDate)) DIV 86400 SEPARATOR ',') as checkups\
                    FROM\
                        Event\
                        JOIN Person ON Person.id = Event.execPerson_id\
                        JOIN EventType ON (Event.eventType_id = EventType.id)\
                        JOIN rbRequestType ON (EventType.requestType_id = rbRequestType.id AND rbRequestType.code = 'pregnancy')\
                        JOIN Client on Client.id = Event.client_id\
                        LEFT JOIN Organisation ON Organisation.id = Person.org_id\
                        LEFT JOIN ClientPolicy ON (ClientPolicy.client_id = Client.id and ClientPolicy.deleted = 0)\
                        LEFT JOIN rbPolicyType ON (ClientPolicy.policyType_id = rbPolicyType.id)\
                        LEFT JOIN ClientDocument ON (ClientDocument.client_id = Client.id and ClientDocument.deleted = 0)\
                        LEFT JOIN rbDocumentType ON ClientDocument.documentType_id = rbDocumentType.id\
                        LEFT JOIN rbDocumentTypeGroup ON (rbDocumentType.group_id = rbDocumentTypeGroup.id AND rbDocumentTypeGroup.code = '1')\
                        LEFT JOIN Action CA ON (\
                            CA.event_id = Event.id AND\
                              CA.actionType_id IN (SELECT id FROM ActionType WHERE ActionType.flatCode = 'cardAttributes') AND\
                              CA.deleted = 0)\
                        LEFT JOIN ActionPropertyType apt_risk ON (apt_risk.actionType_id = CA.actionType_id AND apt_risk.code = 'prenatal_risk_572')\
                        LEFT JOIN ActionProperty ap_risk ON (ap_risk.action_id = CA.id AND ap_risk.type_id = apt_risk.id)\
                        LEFT JOIN ActionProperty_Integer apv_risk ON (ap_risk.id = apv_risk.id)\
                        LEFT JOIN ActionPropertyType apt_bdate ON (apt_bdate.actionType_id = CA.actionType_id AND apt_bdate.code = 'predicted_delivery_date')\
                        LEFT JOIN ActionProperty ap_bdate ON (ap_bdate.action_id = CA.id AND ap_bdate.type_id = apt_bdate.id)\
                        LEFT JOIN ActionProperty_Date apv_bdate ON (ap_bdate.id = apv_bdate.id)\
                        LEFT JOIN ActionPropertyType apt_psdate ON (apt_psdate.actionType_id = CA.actionType_id AND apt_psdate.code = 'pregnancy_start_date')\
                        LEFT JOIN ActionProperty ap_psdate ON (ap_psdate.action_id = CA.id AND ap_psdate.type_id = apt_psdate.id)\
                        LEFT JOIN ActionProperty_Date apv_psdate ON (ap_psdate.id = apv_psdate.id)\
                        LEFT JOIN ActionPropertyType apt_modify_date ON (apt_modify_date.actionType_id = CA.actionType_id AND apt_modify_date.code = 'chart_modify_date')\
                        LEFT JOIN ActionProperty ap_modify_date ON (ap_modify_date.action_id = CA.id AND ap_modify_date.type_id = apt_modify_date.id)\
                        LEFT JOIN ActionProperty_Date apv_modify_date ON (ap_modify_date.id = apv_modify_date.id)\
                        LEFT JOIN Action checkup ON (\
                             checkup.event_id = Event.id AND\
                              checkup.actionType_id IN (SELECT id FROM ActionType WHERE flatCode IN ('risarFirstInspection', 'risarSecondInspection')) AND\
                              checkup.deleted = 0)\
                    WHERE Event.deleted = 0\
                    GROUP BY Event.id
        
                sql_field_string        = name
                sql_field_string        = document
                sql_field_string        = policy
        
                sql_attr_string        = person_name
                sql_attr_uint        = modify_date
                sql_attr_uint        = set_date
                sql_attr_uint        = exec_date
                sql_attr_uint        = bdate
                sql_attr_uint        = psdate
                sql_attr_uint        = card_modify_date
                sql_attr_uint        = risk
                sql_attr_uint        = client_id
                sql_attr_string      = external_id
                sql_attr_uint        = exec_person_id
                sql_attr_uint        = org_id
                sql_attr_multi       = uint checkups from field
                sql_attr_uint      = area
                sql_attr_string      = snils
                sql_attr_string      = birth_date
                sql_attr_string      = document_type
        }
        
        
        index risar_events
        {
                source                  = risar_events
                path                    = /var/lib/sphinxsearch/data_{{ deployment.prefix }}/risar_events
                docinfo                 = extern
                charset_type            = utf-8
                min_word_len            = 2
                min_prefix_len          = 2
        
                charset_table = 0..9, A..Z->a..z, _, a..z, U+2E, \
                   U+410..U+42F->U+430..U+44F, U+430..U+44F, U+401->U+451, U+451
        }
        
        indexer
        {
            mem_limit       = 32M
        }
        
        
        searchd
        {
            listen          = {{ common.sphinx.SQHINXQL_PORT }}:mysql41
            log         = /var/log/sphinxsearch/searchd_{{ deployment.prefix }}.log
            query_log       = /var/log/sphinxsearch/query_{{ deployment.prefix }}.log
            read_timeout        = 5
            max_children        = 30
            pid_file        = /var/run/sphinxsearch/searchd_{{ deployment.prefix }}.pid
            max_matches     = 1000
            seamless_rotate     = 1
            preopen_indexes     = 1
            unlink_old      = 1
            workers         = threads # for RT to work
            binlog_path     = /var/lib/sphinxsearch/data_{{ deployment.prefix }}
        }
