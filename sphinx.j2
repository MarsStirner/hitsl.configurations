#
# Minimal Sphinx configuration sample (clean, simple, functional)
#

source person
{
    type        = {{ common.sphinx.DB_TYPE }}

    sql_host    = {{ common.sphinx.DB_HOST }}
    sql_user    = {{ common.sphinx.DB_USER }}
    sql_pass    = {{ common.sphinx.DB_PASSWORD }}
    sql_db      = {{ common.sphinx.DB_NAME }}
    sql_port    = {{ common.sphinx.DB_PORT }}

    #   sql_query_pre = SET CHARACTER_SET_RESULTS=utf8
    sql_query_pre = SET NAMES utf8
    sql_query_pre = SET CHARACTER SET utf8

    sql_query       = \
    SELECT p.id, p.org_id, p.lastName, p.firstName, p.patrName, \
    s.id as speciality_id, s.name as speciality, s.code as speciality_code, s.OKSOName, \
    os.id as orgStructure_id, os.code as orgStructure_code, os.name as orgStructure \
    FROM Person p LEFT JOIN rbSpeciality s ON p.speciality_id = s.id \
    LEFT JOIN OrgStructure os ON p.orgStructure_id = os.id \
    WHERE p.deleted=0

    sql_attr_uint       = org_id
    sql_field_string    = lastName
    sql_field_string    = firstName
    sql_field_string    = patrName
    sql_attr_uint   = speciality_id
    sql_attr_string = speciality_code
    sql_field_string    = speciality
    sql_attr_uint   = orgStructure_id
    sql_attr_string = orgStructure_code
    sql_attr_string = orgStructure

    sql_query_info      = SELECT * FROM Person WHERE id=$id
}


index person
{
    source          = person
    path            = /var/lib/sphinxsearch/data_{{ deployment.prefix }}/person
    docinfo         = extern
    charset_type        = utf-8
    min_word_len        = 2
    min_prefix_len      = 2

    # default are English and Russian letters
    #   charset_table = 0..9, A..Z->a..z, _, a..z, \
    #       U+410..U+42F->U+430..U+44F, U+430..U+44F, U+401->U+451, U+451

    #   morphology      = stem_enru
    #   enable_star     = 1
}

source patient
{
    type        = {{ common.sphinx.DB_TYPE }}

    sql_host    = {{ common.sphinx.DB_HOST }}
    sql_user    = {{ common.sphinx.DB_USER }}
    sql_pass    = {{ common.sphinx.DB_PASSWORD }}
    sql_db      = {{ common.sphinx.DB_NAME }}
    sql_port    = {{ common.sphinx.DB_PORT }}

    #       sql_query_pre = SET CHARACTER_SET_RESULTS=utf8
    sql_query_pre = SET NAMES utf8
    sql_query_pre = SET CHARACTER SET utf8

    sql_query               = \
    SELECT c.id as id, CAST(c.id AS CHAR) as code, c.lastName, c.firstName, c.patrName, c.SNILS, DATE_FORMAT(c.birthDate, '%d.%m.%Y') as birthDate_f1, DATE_FORMAT(c.birthDate, '%e.%m.%Y') as birthDate_f2, \
    GROUP_CONCAT(CONCAT_WS(' ', cd.serial, cd.number) SEPARATOR '; ') as document, \
    GROUP_CONCAT(CONCAT_WS(' ', cp.serial, cp.number) SEPARATOR '; ') as policy \
    FROM Client c \
    LEFT JOIN ClientDocument cd ON cd.client_id=c.id \
    LEFT JOIN ClientPolicy cp ON cp.client_id=c.id \
    GROUP BY c.id

    sql_field_string        = code
    sql_field_string        = lastName
    sql_field_string        = firstName
    sql_field_string        = patrName
    sql_query_info          = SELECT * FROM Client WHERE id=$id
}


index patient
{
    source                  = patient
    path                    = /var/lib/sphinxsearch/data_{{ deployment.prefix }}/patient
    docinfo                 = extern
    charset_type            = utf-8
    min_word_len            = 2
    min_prefix_len           = 2

    ignore_chars = U+2E
    charset_table = 0..9, A..Z->a..z, _, a..z,  \
    U+410..U+42F->U+430..U+44F, U+430..U+44F, U+401->U+451, U+451

    #       morphology              = stem_enru
    #       enable_star             = 1
}

#index testrt
#{
#   type            = rt
#   rt_mem_limit        = 32M
#
#   path            = /var/lib/sphinxsearch/data/testrt
#   charset_type        = utf-8
#
#   rt_field        = title
#   rt_field        = content
#   rt_attr_uint        = gid
#}


source event_service
{
    type        = {{ common.sphinx.DB_TYPE }}

    sql_host    = {{ common.sphinx.DB_HOST }}
    sql_user    = {{ common.sphinx.DB_USER }}
    sql_pass    = {{ common.sphinx.DB_PASSWORD }}
    sql_db      = {{ common.sphinx.DB_NAME }}
    sql_port    = {{ common.sphinx.DB_PORT }}

    #       sql_query_pre = SET CHARACTER_SET_RESULTS=utf8
    sql_query_pre = SET NAMES utf8
    sql_query_pre = SET CHARACTER SET utf8

    sql_query_pre = SET @a := 1;
    sql_query = \
SELECT @a := @a + 1 AS id, UNITED.* FROM (\
    SELECT \
    pli.id as price_list_item_id, \
    pli.service_id as service_id, \
    pli.serviceCodeOW as service_code, \
    pli.serviceNameOW as service_name, \
    at.id as action_type_id, \
    at.code as at_code, \
    at.name as at_name, \
    pl.id as pricelist_id, \
    pli.price, \
    pli.isAccumulativePrice as is_accumulative_price, \
    s.isComplex as is_complex_service, \
    at.isRequiredTissue as is_at_lab \
    FROM ActionType at \
    INNER JOIN ActionType_Service ats ON ats.master_id=at.id AND (CURDATE() BETWEEN ats.begDate AND COALESCE(ats.endDate, CURDATE())) \
    INNER JOIN EventType_Action e ON e.actionType_id=at.id \
    INNER JOIN PriceListItem pli ON pli.service_id=ats.service_id \
    INNER JOIN PriceList pl ON pli.priceList_id=pl.id \
    INNER JOIN rbService s ON s.id=ats.service_id \
    WHERE \
    at.deleted=0 AND pli.deleted=0 AND pl.deleted=0 AND \
    (CURDATE() BETWEEN pli.begDate AND pli.endDate) \
    GROUP BY at.id, at.code, pl.id \
    \
    UNION  \
    \
    SELECT \
    pli.id as price_list_item_id, \
    pli.service_id as service_id, \
    pli.serviceCodeOW as service_code, \
    pli.serviceNameOW as service_name, \
    NULL as action_type_id, \
    NULL as at_code, \
    NULL as at_name, \
    pl.id as pricelist_id, \
    pli.price, \
    pli.isAccumulativePrice as is_accumulative_price, \
    s.isComplex as is_complex_service, \
    NULL as is_at_lab \
    FROM PriceListItem pli \
    INNER JOIN PriceList pl ON pli.priceList_id=pl.id \
    INNER JOIN rbService s ON pli.service_id=s.id \
    LEFT JOIN ( \
    SELECT at.id, ats.service_id \
    FROM ActionType at \
    INNER JOIN ActionType_Service ats ON ats.master_id=at.id AND (CURDATE() BETWEEN ats.begDate AND COALESCE(ats.endDate, CURDATE())) \
    INNER JOIN EventType_Action e ON e.actionType_id=at.id \
    WHERE at.deleted=0 \
    GROUP BY at.id, ats.service_id \
    ) at_with_services ON pli.service_id=at_with_services.service_id \
    WHERE \
    pli.deleted=0 AND pl.deleted=0 AND (CURDATE() BETWEEN pli.begDate AND pli.endDate) AND \
    at_with_services.id IS NULL AND s.isComplex = 1\
) AS UNITED


    #        -- GROUP_CONCAT(DISTINCT e.eventType_id SEPARATOR ',') as eventType_id, \
    #        -- IF(e.speciality_id, GROUP_CONCAT(DISTINCT e.speciality_id SEPARATOR ','), 0) as speciality_id, \

    sql_field_string    = service_code
    sql_field_string    = service_name
    sql_field_string    = at_code
    sql_field_string    = at_name

    sql_attr_uint       = price_list_item_id
    sql_attr_uint       = service_id
    sql_attr_uint       = action_type_id
    sql_attr_float      = price
    sql_attr_uint       = is_accumulative_price
    sql_attr_uint       = is_complex_service
    sql_attr_uint       = is_at_lab
    sql_attr_uint       = pricelist_id

#       sql_attr_multi     = uint eventType_id from field
#       sql_attr_multi     = uint speciality_id from field

}


index event_service
{
    source                  = event_service
    path                    = /var/lib/sphinxsearch/data_{{ deployment.prefix }}/event_service
    docinfo                 = extern
    charset_type            = utf-8
    min_word_len            = 2
    min_prefix_len           = 2

    charset_table = 0..9, A..Z->a..z, _, a..z, U+2E, \
    U+410..U+42F->U+430..U+44F, U+430..U+44F, U+401->U+451, U+451
}


source events
{
    type        = {{ common.sphinx.DB_TYPE }}

    sql_host    = {{ common.sphinx.DB_HOST }}
    sql_user    = {{ common.sphinx.DB_USER }}
    sql_pass    = {{ common.sphinx.DB_PASSWORD }}
    sql_db      = {{ common.sphinx.DB_NAME }}
    sql_port    = {{ common.sphinx.DB_PORT }}

    #       sql_query_pre = SET CHARACTER_SET_RESULTS=utf8
    sql_query_pre = SET NAMES utf8
    sql_query_pre = SET CHARACTER SET utf8

    sql_query = \
    SELECT \
    Event.id, \
    Event.externalId as external_id, \
    CONCAT_WS(' ', Client.lastName, Client.firstName, Client.patrName) as client_name, \
    Client.id as client_code, \
    Client.birthDate as client_bd, \
    Event.setDate as event_date \
    FROM \
    Event \
    LEFT JOIN Person ON Person.id = Event.execPerson_id \
    JOIN EventType ON Event.eventType_id = EventType.id \
    JOIN rbRequestType ON EventType.requestType_id = rbRequestType.id \
    JOIN Client on Client.id = Event.client_id \
    WHERE Event.deleted = 0 \
    GROUP BY Event.id

    sql_field_string      = external_id
    sql_field_string      = client_code
    sql_field_string      = client_name
    sql_field_string      = client_bd

    sql_attr_string       = event_date
}


index events
{
    source                  = events
    path                    = /var/lib/sphinxsearch/data_{{ deployment.prefix }}/events
    docinfo                 = extern
    charset_type            = utf-8
    min_word_len            = 2
    min_prefix_len          = 2

    charset_table = 0..9, A..Z->a..z, _, /, a..z, U+2E, \
    U+410..U+42F->U+430..U+44F, U+430..U+44F, U+401->U+451, U+451
}



source risar_events
{
    type        = {{ common.sphinx.DB_TYPE }}

    sql_host    = {{ common.sphinx.DB_HOST }}
    sql_user    = {{ common.sphinx.DB_USER }}
    sql_pass    = {{ common.sphinx.DB_PASSWORD }}
    sql_db      = {{ common.sphinx.DB_NAME }}
    sql_port    = {{ common.sphinx.DB_PORT }}

    #       sql_query_pre = SET CHARACTER_SET_RESULTS=utf8
    sql_query_pre = SET NAMES utf8
    sql_query_pre = SET CHARACTER SET utf8

    sql_query = \
    SELECT\
    Event.id,\
    Event.externalId AS external_id,\
    Event.execPerson_id AS exec_person_id,\
    Event.client_id AS client_id,\
    UNIX_TIMESTAMP(DATE(Event.setDate)) AS set_date,\
    UNIX_TIMESTAMP(Event.modifyDatetime) AS modify_date,\
    UNIX_TIMESTAMP(DATE(Event.execDate)) AS exec_date,\
    Person.org_id AS org_id,\
    Organisation.shortName AS org_name,\
    CAST(LEFT(Organisation.area, 8) AS UNSIGNED) AS AREA,\
    CONCAT_WS(',', LEFT(Organisation.area, 2), LEFT(Organisation.area, 5), LEFT(Organisation.area, 8)) as AREAS, \
    CONCAT_WS(' ', Client.lastName, Client.firstName, Client.patrName) AS NAME,\
    GROUP_CONCAT(DISTINCT CONCAT_WS(' ', ClientDocument.serial, ClientDocument.number) SEPARATOR '; ') AS document,\
    rbDocumentType.name AS document_type,\
    GROUP_CONCAT(DISTINCT CONCAT_WS(' ', rbPolicyType.name, ClientPolicy.serial, ClientPolicy.number) SEPARATOR '; ') AS policy,\
    Client.SNILS AS snils,\
    DATE_FORMAT(Client.birthDate, '%d.%m.%Y') AS birth_date,\
    Client.age AS client_age,\
    apv_wg.value AS client_work_code,\
    CONCAT_WS(' ', Person.lastName, Person.firstName, Person.patrName) AS person_name,\
    apv_risk.value AS risk,\
    risar_radz_risk.risk_rate_id as radz_risk,\
    UNIX_TIMESTAMP(DATE(apv_bdate.value)) AS bdate,\
    UNIX_TIMESTAMP(DATE(apv_psdate.value)) AS psdate,\
    UNIX_TIMESTAMP(DATE(apv_modify_date.value)) AS card_modify_date,\
    GROUP_CONCAT(UNIX_TIMESTAMP(DATE(checkup.begDate)) DIV 86400 SEPARATOR ',') AS checkups,\
    /* latest pregnancy checkup date or event setdate */\
    UNIX_TIMESTAMP(COALESCE(MAX(DATE(checkup.begDate)), DATE(Event.setDate))) DIV 86400 AS latest_checkup_date,\
    rbrt.id as request_type_id,\
    rbrt.code as card_req_type,\
    /* pregnancy week */\
    IF (apv_psdate.id IS NOT NULL,\
        FLOOR(DATEDIFF(IF(apv_bdate.value IS NOT NULL, LEAST(apv_bdate.value, CURDATE()), CURDATE()),\
                       apv_psdate.value) DIV 7) + 1,\
        NULL) AS preg_week,\
    /* pathology_list */\
    GROUP_CONCAT(DISTINCT apv_pathology.value) AS pathology_list_id,\
    /* card_fill_rate */\
    apv_card_fill_rate.value AS card_fill_rate,\
    /* card_fill_rate_anamnesis */\
    apv_card_fill_rate_anamnesis.value AS card_fill_rate_anamnesis,\
    /* card_fill_rate_first_inspection */\
    apv_card_fill_rate_first_inspection.value AS card_fill_rate_first_inspection,\
    /* card_fill_rate_repeated_inspection */\
    apv_card_fill_rate_repeated_inspection.value AS card_fill_rate_repeated_inspection,\
    /* card_fill_rate_epicrisis */\
    apv_card_fill_rate_epicrisis.value AS card_fill_rate_epicrisis,\
    /* risk groups */\
    RRR.risk_group_codes AS risk_group_codes,\
    /* epicrisis */\
    epicr.id AS epicrisis_id,\
    UNIX_TIMESTAMP(apv_delivd.value) DIV 86400 AS epicrisis_delivery_date,\
    /* diags mkbs */\
    GROUP_CONCAT(DISTINCT Diags.mkb_code) AS diag_mkbs,\
    GROUP_CONCAT(DISTINCT Diags.mkb_id) AS diag_mkb_ids,\
    GROUP_CONCAT(DISTINCT\
        IF(Diags.ds_endDate IS NOT NULL AND\
               /* latest diagnostic is within event */\
               SUBSTRING_INDEX(Diags.dg_dates, ",", -1) <= COALESCE(Event.execDate, CURDATE()),\
           Diags.mkb_code,\
           NULL)\
    ) AS diag_closed_mkbs,\
    GROUP_CONCAT(DISTINCT\
        IF(Diags.ds_endDate IS NOT NULL AND\
               /* latest diagnostic is within event */\
               SUBSTRING_INDEX(Diags.dg_dates, ",", -1) <= COALESCE(Event.execDate, CURDATE()),\
           Diags.mkb_id,\
           NULL)\
    ) AS diag_closed_mkb_ids,\
    /* EventMeasure overdue */\
    em.has_overdue,\
    em.has_overdue_lab_test,\
    em.has_overdue_func_test,\
    em.has_overdue_checkup,\
    em.has_overdue_healthcare,\
    em.has_overdue_hospitalization,\
    em.has_overdue_social_preventiv,\
    /* event person control*/\
    epc.persons AS epc_persons,\
     /* missed checkups */\
    IF(AllCheckups.id IS NULL, 1, 0) AS has_missed_checkups\
    FROM\
    Event\
    JOIN Person ON Person.id = Event.execPerson_id\
    JOIN EventType ON (Event.eventType_id = EventType.id)\
    JOIN rbRequestType rbrt ON (EventType.requestType_id = rbrt.id AND rbrt.code IN ('pregnancy', 'gynecological'))\
    JOIN (SELECT *, FLOOR(DATEDIFF(CURDATE(), Client.birthDate) / 365.25) AS age FROM Client) AS Client ON Client.id = Event.client_id\
    LEFT JOIN Organisation ON Organisation.id = Person.org_id\
    LEFT JOIN ClientPolicy ON (ClientPolicy.client_id = Client.id AND ClientPolicy.deleted = 0)\
    LEFT JOIN rbPolicyType ON (ClientPolicy.policyType_id = rbPolicyType.id)\
    LEFT JOIN ClientDocument ON (ClientDocument.client_id = Client.id AND ClientDocument.deleted = 0)\
    LEFT JOIN rbDocumentType ON ClientDocument.documentType_id = rbDocumentType.id\
    LEFT JOIN rbDocumentTypeGroup ON (rbDocumentType.group_id = rbDocumentTypeGroup.id AND rbDocumentTypeGroup.code = '1')\
    /* cardAttributes */\
    LEFT JOIN Action CA ON (\
        CA.event_id = Event.id AND\
        CA.actionType_id IN (SELECT id FROM ActionType WHERE ActionType.flatCode = 'cardAttributes') AND\
        CA.deleted = 0)\
    /* risar_mother_anamnesis */\
    LEFT JOIN Action anmz ON (\
        anmz.event_id = Event.id AND\
        anmz.actionType_id IN (SELECT id FROM ActionType WHERE ActionType.flatCode = 'risar_mother_anamnesis') AND\
        anmz.deleted = 0)\
    /* epicrisis */\
    LEFT JOIN Action epicr ON (\
        epicr.event_id = Event.id AND\
        epicr.actionType_id IN (SELECT id FROM ActionType WHERE ActionType.flatCode = 'epicrisis') AND\
        epicr.deleted = 0)\
    /* EventMeasure overdue */\
    LEFT JOIN (\
        SELECT \
            em.event_id,\
            Sum(IF(em.status = 5, 1, 0)) > 0 AS has_overdue,\
            Sum(IF(em.status = 5 and rbmt.code = 'lab_test', 1, 0)) > 0 AS has_overdue_lab_test,\
            Sum(IF(em.status = 5 and rbmt.code = 'func_test', 1, 0)) > 0 AS has_overdue_func_test,\
            Sum(IF(em.status = 5 and rbmt.code = 'checkup', 1, 0)) > 0 AS has_overdue_checkup,\
            Sum(IF(em.status = 5 and rbmt.code = 'healthcare', 1, 0)) > 0 AS has_overdue_healthcare,\
            Sum(IF(em.status = 5 and rbmt.code = 'hospitalization', 1, 0)) > 0 AS has_overdue_hospitalization,\
            Sum(IF(em.status = 5 and rbmt.code = 'social_preventiv', 1, 0)) > 0 AS has_overdue_social_preventiv\
        FROM EventMeasure em\
            LEFT JOIN ExpertSchemeMeasure esm ON esm.id = em.schemeMeasure_id\
            JOIN Measure m ON (m.id = esm.measure_id or m.id = em.measure_id)\
            JOIN rbMeasureType rbmt ON m.measureType_id = rbmt.id\
        WHERE em.deleted = 0\
        GROUP BY em.event_id) em\
    ON (em.event_id = Event.id)\
    /* event person control */\
    LEFT JOIN (\
        SELECT epc.event_id AS event_id, GROUP_CONCAT(epc.person_id) AS persons\
        FROM\
        EventPersonsControl epc\
        WHERE epc.endDate IS NULL\
        GROUP BY epc.event_id\
    ) epc ON (Event.id = epc.event_id)\
    \
    /* property values */\
    \
    /* work_group */\
    LEFT JOIN ActionPropertyType apt_wg ON (apt_wg.actionType_id = anmz.actionType_id AND apt_wg.code = 'work_group')\
    LEFT JOIN ActionProperty ap_wg ON (ap_wg.action_id = anmz.id AND ap_wg.type_id = apt_wg.id)\
    LEFT JOIN ActionProperty_ExtRef apv_wg ON (ap_wg.id = apv_wg.id)\
    /* epicrisis delivery_date */\
    LEFT JOIN ActionPropertyType apt_delivd ON (apt_delivd.actionType_id = epicr.actionType_id AND apt_delivd.code = 'delivery_date')\
    LEFT JOIN ActionProperty ap_delivd ON (ap_delivd.action_id = epicr.id AND ap_delivd.type_id = apt_delivd.id)\
    LEFT JOIN ActionProperty_Date apv_delivd ON (ap_delivd.id = apv_delivd.id)\
    /* prenatal_risk_572 */\
    LEFT JOIN ActionPropertyType apt_risk ON (apt_risk.actionType_id = CA.actionType_id AND apt_risk.code = 'prenatal_risk_572')\
    LEFT JOIN ActionProperty ap_risk ON (ap_risk.action_id = CA.id AND ap_risk.type_id = apt_risk.id)\
    LEFT JOIN ActionProperty_Integer apv_risk ON (ap_risk.id = apv_risk.id)\
    /* radz_risk */\
    LEFT JOIN RisarRadzinskyRisks risar_radz_risk on risar_radz_risk.event_id = Event.id\
    /* predicted_delivery_date */\
    LEFT JOIN ActionPropertyType apt_bdate ON (apt_bdate.actionType_id = CA.actionType_id AND apt_bdate.code = 'predicted_delivery_date')\
    LEFT JOIN ActionProperty ap_bdate ON (ap_bdate.action_id = CA.id AND ap_bdate.type_id = apt_bdate.id)\
    LEFT JOIN ActionProperty_Date apv_bdate ON (ap_bdate.id = apv_bdate.id)\
    /* pregnancy_start_date */\
    LEFT JOIN ActionPropertyType apt_psdate ON (apt_psdate.actionType_id = CA.actionType_id AND apt_psdate.code = 'pregnancy_start_date')\
    LEFT JOIN ActionProperty ap_psdate ON (ap_psdate.action_id = CA.id AND ap_psdate.type_id = apt_psdate.id)\
    LEFT JOIN ActionProperty_Date apv_psdate ON (ap_psdate.id = apv_psdate.id)\
    /* chart_modify_date */\
    LEFT JOIN ActionPropertyType apt_modify_date ON (apt_modify_date.actionType_id = CA.actionType_id AND apt_modify_date.code = 'chart_modify_date')\
    LEFT JOIN ActionProperty ap_modify_date ON (ap_modify_date.action_id = CA.id AND ap_modify_date.type_id = apt_modify_date.id)\
    LEFT JOIN ActionProperty_Date apv_modify_date ON (ap_modify_date.id = apv_modify_date.id)\
    /* pathology */\
    LEFT JOIN ActionPropertyType apt_pathology ON (apt_pathology.actionType_id = CA.actionType_id AND apt_pathology.code = 'pregnancy_pathology_list')\
    LEFT JOIN ActionProperty ap_pathology ON (ap_pathology.action_id = CA.id AND ap_pathology.type_id = apt_pathology.id)\
    LEFT JOIN ActionProperty_Integer apv_pathology ON (ap_pathology.id = apv_pathology.id)\
    /* card_fill_rate */\
    LEFT JOIN ActionPropertyType apt_card_fill_rate ON (apt_card_fill_rate.actionType_id = CA.actionType_id AND apt_card_fill_rate.code = 'card_fill_rate')\
    LEFT JOIN ActionProperty ap_card_fill_rate ON (ap_card_fill_rate.action_id = CA.id AND ap_card_fill_rate.type_id = apt_card_fill_rate.id)\
    LEFT JOIN ActionProperty_Integer apv_card_fill_rate ON (ap_card_fill_rate.id = apv_card_fill_rate.id)\
    /* card_fill_rate_anamnesis */\
    LEFT JOIN ActionPropertyType apt_card_fill_rate_anamnesis ON (apt_card_fill_rate_anamnesis.actionType_id = CA.actionType_id AND apt_card_fill_rate_anamnesis.code = 'card_fill_rate_anamnesis')\
    LEFT JOIN ActionProperty ap_card_fill_rate_anamnesis ON (ap_card_fill_rate_anamnesis.action_id = CA.id AND ap_card_fill_rate_anamnesis.type_id = apt_card_fill_rate_anamnesis.id)\
    LEFT JOIN ActionProperty_Integer apv_card_fill_rate_anamnesis ON (ap_card_fill_rate_anamnesis.id = apv_card_fill_rate_anamnesis.id)\
    /* card_fill_rate_first_inspection */\
    LEFT JOIN ActionPropertyType apt_card_fill_rate_first_inspection ON (apt_card_fill_rate_first_inspection.actionType_id = CA.actionType_id AND apt_card_fill_rate_first_inspection.code = 'card_fill_rate_first_inspection')\
    LEFT JOIN ActionProperty ap_card_fill_rate_first_inspection ON (ap_card_fill_rate_first_inspection.action_id = CA.id AND ap_card_fill_rate_first_inspection.type_id = apt_card_fill_rate_first_inspection.id)\
    LEFT JOIN ActionProperty_Integer apv_card_fill_rate_first_inspection ON (ap_card_fill_rate_first_inspection.id = apv_card_fill_rate_first_inspection.id)\
    /* card_fill_rate_repeated_inspection */\
    LEFT JOIN ActionPropertyType apt_card_fill_rate_repeated_inspection ON (apt_card_fill_rate_repeated_inspection.actionType_id = CA.actionType_id AND apt_card_fill_rate_repeated_inspection.code = 'card_fill_rate_repeated_inspection')\
    LEFT JOIN ActionProperty ap_card_fill_rate_repeated_inspection ON (ap_card_fill_rate_repeated_inspection.action_id = CA.id AND ap_card_fill_rate_repeated_inspection.type_id = apt_card_fill_rate_repeated_inspection.id)\
    LEFT JOIN ActionProperty_Integer apv_card_fill_rate_repeated_inspection ON (ap_card_fill_rate_repeated_inspection.id = apv_card_fill_rate_repeated_inspection.id)\
    /* card_fill_rate_epicrisis */\
    LEFT JOIN ActionPropertyType apt_card_fill_rate_epicrisis ON (apt_card_fill_rate_epicrisis.actionType_id = CA.actionType_id AND apt_card_fill_rate_epicrisis.code = 'card_fill_rate_epicrisis')\
    LEFT JOIN ActionProperty ap_card_fill_rate_epicrisis ON (ap_card_fill_rate_epicrisis.action_id = CA.id AND ap_card_fill_rate_epicrisis.type_id = apt_card_fill_rate_epicrisis.id)\
    LEFT JOIN ActionProperty_Integer apv_card_fill_rate_epicrisis ON (ap_card_fill_rate_epicrisis.id = apv_card_fill_rate_epicrisis.id)\
    /* pregnancy checkups */\
    LEFT JOIN Action checkup ON (\
        checkup.event_id = Event.id AND\
        checkup.actionType_id IN (\
            SELECT id FROM ActionType\
            WHERE flatCode IN ('risarFirstInspection', 'risarSecondInspection', 'risarPCCheckUp')) AND\
        checkup.deleted = 0)\
    /* risk groups */\
    LEFT JOIN (\
        SELECT rrr.event_id, GROUP_CONCAT(DISTINCT rrr.riskGroup_code) AS risk_group_codes\
        FROM RisarRiskGroup rrr\
        WHERE rrr.deleted = 0\
        GROUP BY rrr.event_id\
    ) RRR ON Event.id = RRR.event_id\
    /* diagnoses */\
    LEFT JOIN (\
        SELECT dg.id AS dg_id, dg.setDate AS dg_setDate, dg.MKB AS mkb_code, MKB.id AS mkb_id,\
            ds.client_id AS client_id, ds.id AS ds_id, ds.setDate AS ds_setDate, ds.endDate AS ds_endDate,\
            max_dg_ids.dg_dates AS dg_dates\
        FROM Diagnostic dg\
        JOIN (\
            SELECT MAX(dg.id) AS diagnostic_id, ds.id AS diagnosis_id, max_dg_dates.dg_dates AS dg_dates\
            FROM Diagnostic dg\
            JOIN (\
                SELECT ds.id AS diagnosis_id, MAX(dg.setDate) AS max_date, GROUP_CONCAT(dg.setDate ORDER BY dg.SetDate) AS dg_dates\
                FROM Diagnostic dg JOIN Diagnosis ds ON dg.diagnosis_id = ds.id\
                WHERE ds.deleted = 0\
                GROUP BY ds.id\
            ) max_dg_dates ON (dg.setDate = max_dg_dates.max_date AND dg.diagnosis_id = max_dg_dates.diagnosis_id)\
            JOIN Diagnosis ds ON dg.diagnosis_id = ds.id\
            WHERE ds.deleted = 0\
            GROUP BY ds.id\
        ) max_dg_ids ON (dg.id = max_dg_ids.diagnostic_id AND dg.diagnosis_id = max_dg_ids.diagnosis_id)\
        JOIN Diagnosis ds ON dg.diagnosis_id = ds.id\
        JOIN MKB ON MKB.DiagID = dg.MKB\
        WHERE ds.deleted = 0\
        GROUP BY ds.id\
    ) Diags ON (\
        Event.client_id = Diags.client_id AND\
        Diags.ds_setDate <= COALESCE(Event.execDate, CURDATE()) AND\
        COALESCE(Diags.ds_endDate, CURDATE()) >= Event.setDate\
    )\
    /* missed checkups */\
    LEFT OUTER JOIN (\
        SELECT\
            `Action`.id AS action_id,\
            `Action`.event_id AS event_id, `Action`.`begDate` AS beg_date,\
            `Action`.`endDate` AS end_date, `ActionProperty_Date`.value AS next_date\
        FROM `Action`\
        INNER JOIN (\
            SELECT max(`Action`.id) AS action_id, `Action`.event_id AS event_id\
            FROM `ActionType`, `Action` INNER JOIN (\
                SELECT max(`Action`.`begDate`) AS max_beg_date, `Event`.id AS event_id\
                FROM `Action` INNER JOIN `Event` ON `Event`.id = `Action`.event_id\
                INNER JOIN `EventType` ON `EventType`.id = `Event`.`eventType_id`\
                INNER JOIN `rbRequestType` ON `rbRequestType`.id = `EventType`.`requestType_id`\
                INNER JOIN `ActionType` ON `ActionType`.id = `Action`.`actionType_id`\
                INNER JOIN `ActionProperty` ON `Action`.id = `ActionProperty`.action_id\
                INNER JOIN `ActionPropertyType` ON `ActionPropertyType`.id = `ActionProperty`.type_id\
                INNER JOIN `ActionProperty_Date` ON `ActionProperty`.id = `ActionProperty_Date`.id\
                WHERE `Event`.deleted = 0 AND `Action`.deleted = 0 AND `rbRequestType`.code = "pregnancy" AND\
                    `ActionType`.`flatCode` IN ("risarFirstInspection", "risarSecondInspection", "risarPCCheckUp") AND\
                    `ActionPropertyType`.code = "next_date" AND `ActionProperty_Date`.value <= curdate()\
                GROUP BY `Event`.id\
            ) AS `MaxActionBegDates` ON `MaxActionBegDates`.max_beg_date = `Action`.`begDate`\
                AND `MaxActionBegDates`.event_id = `Action`.event_id\
            WHERE `Action`.deleted = 0 AND `ActionType`.`flatCode` IN ("risarFirstInspection", "risarSecondInspection", "risarPCCheckUp")\
            GROUP BY `Action`.event_id\
        ) AS `EventLatestCheckups` ON `EventLatestCheckups`.action_id = `Action`.id\
        INNER JOIN `ActionProperty` ON `Action`.id = `ActionProperty`.action_id\
        INNER JOIN `ActionPropertyType` ON `ActionPropertyType`.id = `ActionProperty`.type_id\
        INNER JOIN `ActionProperty_Date` ON `ActionProperty`.id = `ActionProperty_Date`.id\
        WHERE `ActionPropertyType`.code = "next_date"\
    ) AS `EventLatestInspectionsWithNextDate` ON `EventLatestInspectionsWithNextDate`.event_id = `Event`.id\
        LEFT JOIN (\
        SELECT a.id, a.begDate, a.event_id\
        FROM Action a\
        JOIN ActionType at ON a.actionType_id = at.id\
        WHERE a.deleted = 0 AND at.flatCode in ("risarFirstInspection", "risarSecondInspection", "risarPCCheckUp")\
    ) AS `AllCheckups` ON AllCheckups.event_id = Event.id\
      AND EventLatestInspectionsWithNextDate.beg_date < AllCheckups.begDate AND EventLatestInspectionsWithNextDate.next_date >= AllCheckups.begDate\
    WHERE\
        Event.deleted = 0\
        AND IF(rbrt.code = 'pregnancy', CA.id IS NOT NULL, 1)\
    GROUP BY Event.id


    sql_field_string        = name
    sql_field_string        = document
    sql_field_string        = policy
    sql_field_string        = client_work_code

    sql_attr_string         = card_req_type
    sql_attr_string         = org_name
    sql_attr_string         = person_name
    sql_attr_uint           = modify_date
    sql_attr_uint           = set_date
    sql_attr_uint           = exec_date
    sql_attr_uint           = bdate
    sql_attr_uint           = psdate
    sql_attr_uint           = card_modify_date
    sql_attr_uint           = risk
    sql_attr_uint           = radz_risk
    sql_attr_uint           = client_id
    sql_attr_string         = external_id
    sql_attr_uint           = exec_person_id
    sql_attr_uint           = org_id
    sql_attr_multi          = uint checkups from field
    sql_attr_uint           = area
    sql_attr_multi          = uint areas from field
    sql_attr_string         = snils
    sql_attr_string         = birth_date
    sql_attr_uint           = client_age
    sql_attr_string         = document_type
    sql_attr_uint           = request_type_id
    sql_attr_uint           = preg_week
    sql_attr_uint           = latest_checkup_date
    sql_attr_multi          = uint pathology_list_id from field
    sql_attr_uint           = card_fill_rate
    sql_attr_uint           = card_fill_rate_anamnesis
    sql_attr_uint           = card_fill_rate_first_inspection
    sql_attr_uint           = card_fill_rate_repeated_inspection
    sql_attr_uint           = card_fill_rate_epicrisis
    sql_field_string        = risk_group_codes
    sql_attr_uint           = epicrisis_id
    sql_attr_uint           = epicrisis_delivery_date
    sql_field_string        = diag_mkbs
    sql_attr_multi          = uint diag_mkb_ids from field
    sql_field_string        = diag_closed_mkbs
    sql_attr_multi          = uint diag_closed_mkb_ids from field
    sql_attr_uint           = has_overdue
    sql_attr_uint           = has_overdue_lab_test
    sql_attr_uint           = has_overdue_func_test
    sql_attr_uint           = has_overdue_checkup
    sql_attr_uint           = has_overdue_healthcare
    sql_attr_uint           = has_overdue_hospitalization
    sql_attr_uint           = has_overdue_social_preventiv
    sql_attr_multi          = uint epc_persons from field
    sql_attr_uint           = has_missed_checkups
}


index risar_events
{
    source                  = risar_events
    path                    = /var/lib/sphinxsearch/data_{{ deployment.prefix }}/risar_events
    docinfo                 = extern
    charset_type            = utf-8
    min_word_len            = 2
    min_prefix_len          = 2

    charset_table = 0..9, A..Z->a..z, _, a..z, U+2E, \
    U+410..U+42F->U+430..U+44F, U+430..U+44F, U+401->U+451, U+451
}


source risar_events_short
{
    type        = {{ common.sphinx.DB_TYPE }}

    sql_host    = {{ common.sphinx.DB_HOST }}
    sql_user    = {{ common.sphinx.DB_USER }}
    sql_pass    = {{ common.sphinx.DB_PASSWORD }}
    sql_db      = {{ common.sphinx.DB_NAME }}
    sql_port    = {{ common.sphinx.DB_PORT }}

    #       sql_query_pre = SET CHARACTER_SET_RESULTS=utf8
    sql_query_pre = SET NAMES utf8
    sql_query_pre = SET CHARACTER SET utf8

    sql_query = \
    SELECT \
    e.id, \
    e.externalId as external_id, \
    SUBSTRING_INDEX(externalId, '/', 1) as ext_left, \
    SUBSTRING_INDEX(externalId, '/', -1) as ext_right, \
    c.lastName as client_lastName, \
    c.firstName as client_firstName, \
    c.patrName as client_patrName, \
    CONCAT_WS(' ', c.lastName, c.firstName, c.patrName) as client_name, \
    c.id as client_code, \
    c.birthDate as client_bd, \
    e.setDate as event_date, \
    et.code as event_type_code \
    FROM \
    Event e \
    LEFT JOIN Person ON Person.id = e.execPerson_id \
    JOIN EventType et ON e.eventType_id = et.id \
    JOIN rbRequestType ON et.requestType_id = rbRequestType.id AND rbRequestType.code IN ('pregnancy', 'gynecological') \
    JOIN Client c on c.id = e.client_id \
    WHERE e.deleted = 0 AND e.execDate IS NULL \
    GROUP BY e.id

    sql_field_string      = external_id
    sql_field_string      = ext_left
    sql_field_string      = ext_right
    sql_field_string      = client_name
    sql_field_string      = client_lastName
    sql_field_string      = client_firstName
    sql_field_string      = client_patrName


    sql_attr_string       = event_date
    sql_attr_string      = client_code
    sql_attr_string      = client_bd
    sql_attr_string      = event_type_code
}


index risar_events_short
{
    source                  = risar_events_short
    path                    = /var/lib/sphinxsearch/data_{{ deployment.prefix }}/risar_events_short
    docinfo                 = extern
    charset_type            = utf-8
    min_word_len            = 1
    min_prefix_len          = 1

    charset_table = 0..9, A..Z->a..z, _, /, a..z, U+2E, \
    U+410..U+42F->U+430..U+44F, U+430..U+44F, U+401->U+451, U+451
}


indexer
{
    mem_limit       = 32M
}


searchd
{
    listen          = {{ common.sphinx.SPHINXQL_PORT }}:mysql41
    log             = {{ deployment.base_dir }}/logs/{{ this.name }}_searchd.log
    query_log       = {{ deployment.base_dir }}/logs/{{ this.name }}_query.log
    read_timeout    = 5
    max_children    = 30
    pid_file        = {{ deployment.base_dir }}/sphinx/{{ this.name }}.pid
    max_matches     = 10000
    seamless_rotate = 1
    preopen_indexes = 1
    unlink_old      = 1
    workers         = threads # for RT to work
    binlog_path     = /var/lib/sphinxsearch/data_{{ deployment.prefix }}
}
