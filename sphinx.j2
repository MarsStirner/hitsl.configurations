#
# Minimal Sphinx configuration sample (clean, simple, functional)
#

source person
{
    type        = {{ common.sphinx.DB_TYPE }}

    sql_host    = {{ common.sphinx.DB_HOST }}
    sql_user    = {{ common.sphinx.DB_USER }}
    sql_pass    = {{ common.sphinx.DB_PASSWORD }}
    sql_db      = {{ common.sphinx.DB_NAME }}
    sql_port    = {{ common.sphinx.DB_PORT }}

    #   sql_query_pre = SET CHARACTER_SET_RESULTS=utf8
    sql_query_pre = SET NAMES utf8
    sql_query_pre = SET CHARACTER SET utf8

    sql_query       = \
    SELECT p.id, p.org_id, p.lastName, p.firstName, p.patrName, \
    s.id as speciality_id, s.name as speciality, s.code as speciality_code, s.OKSOName, \
    os.id as orgStructure_id, os.code as orgStructure_code, os.name as orgStructure \
    FROM Person p LEFT JOIN rbSpeciality s ON p.speciality_id = s.id \
    LEFT JOIN OrgStructure os ON p.orgStructure_id = os.id \
    WHERE p.deleted=0

    sql_attr_uint       = org_id
    sql_field_string    = lastName
    sql_field_string    = firstName
    sql_field_string    = patrName
    sql_attr_uint   = speciality_id
    sql_attr_string = speciality_code
    sql_field_string    = speciality
    sql_attr_uint   = orgStructure_id
    sql_attr_string = orgStructure_code
    sql_attr_string = orgStructure

    sql_query_info      = SELECT * FROM Person WHERE id=$id
}


index person
{
    source          = person
    path            = /var/lib/sphinxsearch/data_{{ deployment.prefix }}/person
    docinfo         = extern
    charset_type        = utf-8
    min_word_len        = 2
    min_prefix_len      = 2

    # default are English and Russian letters
    #   charset_table = 0..9, A..Z->a..z, _, a..z, \
    #       U+410..U+42F->U+430..U+44F, U+430..U+44F, U+401->U+451, U+451

    #   morphology      = stem_enru
    #   enable_star     = 1
}

source patient
{
    type        = {{ common.sphinx.DB_TYPE }}

    sql_host    = {{ common.sphinx.DB_HOST }}
    sql_user    = {{ common.sphinx.DB_USER }}
    sql_pass    = {{ common.sphinx.DB_PASSWORD }}
    sql_db      = {{ common.sphinx.DB_NAME }}
    sql_port    = {{ common.sphinx.DB_PORT }}

    #       sql_query_pre = SET CHARACTER_SET_RESULTS=utf8
    sql_query_pre = SET NAMES utf8
    sql_query_pre = SET CHARACTER SET utf8

    sql_query               = \
    SELECT c.id as id, CAST(c.id AS CHAR) as code, c.lastName, c.firstName, c.patrName, c.SNILS, DATE_FORMAT(c.birthDate, '%d.%m.%Y') as birthDate_f1, DATE_FORMAT(c.birthDate, '%e.%m.%Y') as birthDate_f2, \
    GROUP_CONCAT(CONCAT_WS(' ', cd.serial, cd.number) SEPARATOR '; ') as document, \
    GROUP_CONCAT(CONCAT_WS(' ', cp.serial, cp.number) SEPARATOR '; ') as policy \
    FROM Client c \
    LEFT JOIN ClientDocument cd ON cd.client_id=c.id \
    LEFT JOIN ClientPolicy cp ON cp.client_id=c.id \
    GROUP BY c.id

    sql_field_string        = code
    sql_field_string        = lastName
    sql_field_string        = firstName
    sql_field_string        = patrName
    sql_query_info          = SELECT * FROM Client WHERE id=$id
}


index patient
{
    source                  = patient
    path                    = /var/lib/sphinxsearch/data_{{ deployment.prefix }}/patient
    docinfo                 = extern
    charset_type            = utf-8
    min_word_len            = 2
    min_prefix_len           = 2

    ignore_chars = U+2E
    charset_table = 0..9, A..Z->a..z, _, a..z,  \
    U+410..U+42F->U+430..U+44F, U+430..U+44F, U+401->U+451, U+451

    #       morphology              = stem_enru
    #       enable_star             = 1
}

#index testrt
#{
#   type            = rt
#   rt_mem_limit        = 32M
#
#   path            = /var/lib/sphinxsearch/data/testrt
#   charset_type        = utf-8
#
#   rt_field        = title
#   rt_field        = content
#   rt_attr_uint        = gid
#}


source event_service
{
    type        = {{ common.sphinx.DB_TYPE }}

    sql_host    = {{ common.sphinx.DB_HOST }}
    sql_user    = {{ common.sphinx.DB_USER }}
    sql_pass    = {{ common.sphinx.DB_PASSWORD }}
    sql_db      = {{ common.sphinx.DB_NAME }}
    sql_port    = {{ common.sphinx.DB_PORT }}

    #       sql_query_pre = SET CHARACTER_SET_RESULTS=utf8
    sql_query_pre = SET NAMES utf8
    sql_query_pre = SET CHARACTER SET utf8

    sql_query_pre = SET @a := 1;
    sql_query = \
    SELECT \
    @a := @a + 1 AS id, \
    pli.id as price_list_item_id, \
    pli.service_id as service_id, \
    pli.serviceCodeOW as service_code, \
    pli.serviceNameOW as service_name, \
    at.id as action_type_id, \
    at.code as at_code, \
    at.name as at_name, \
    pl.id as pricelist_id, \
    pli.price, \
    pli.isAccumulativePrice as is_accumulative_price, \
    s.isComplex as is_complex_service, \
    (SELECT at.isRequiredTissue AND EXISTS ( \
    SELECT * \
    FROM ActionPropertyType \
    WHERE actionType_id = at.id AND isAssignable = 1 AND deleted = 0) \
    ) as is_at_lab \
    FROM ActionType at \
    INNER JOIN ActionType_Service ats ON ats.master_id=at.id AND (CURDATE() BETWEEN ats.begDate AND COALESCE(ats.endDate, CURDATE())) \
    INNER JOIN EventType_Action e ON e.actionType_id=at.id \
    INNER JOIN PriceListItem pli ON pli.service_id=ats.service_id \
    INNER JOIN PriceList pl ON pli.priceList_id=pl.id \
    INNER JOIN rbService s ON s.id=ats.service_id \
    WHERE \
    at.deleted=0 AND pli.deleted=0 AND pl.deleted=0 AND \
    (CURDATE() BETWEEN pli.begDate AND pli.endDate) \
    GROUP BY at.id, at.code, pl.id \
    \
    UNION  \
    \
    SELECT \
    @a := @a + 1 AS id, \
    pli.id as price_list_item_id, \
    pli.service_id as service_id, \
    pli.serviceCodeOW as service_code, \
    pli.serviceNameOW as service_name, \
    NULL as action_type_id, \
    NULL as at_code, \
    NULL as at_name, \
    pl.id as pricelist_id, \
    pli.price, \
    pli.isAccumulativePrice as is_accumulative_price, \
    s.isComplex as is_complex_service, \
    NULL as is_at_lab \
    FROM PriceListItem pli \
    INNER JOIN PriceList pl ON pli.priceList_id=pl.id \
    INNER JOIN rbService s ON pli.service_id=s.id \
    LEFT JOIN ( \
    SELECT at.id, ats.service_id \
    FROM ActionType at \
    INNER JOIN ActionType_Service ats ON ats.master_id=at.id AND (CURDATE() BETWEEN ats.begDate AND COALESCE(ats.endDate, CURDATE())) \
    INNER JOIN EventType_Action e ON e.actionType_id=at.id \
    WHERE at.deleted=0 \
    GROUP BY at.id, ats.service_id \
    ) at_with_services ON pli.service_id=at_with_services.service_id \
    WHERE \
    pli.deleted=0 AND pl.deleted=0 AND (CURDATE() BETWEEN pli.begDate AND pli.endDate) AND \
    at_with_services.id IS NULL AND s.isComplex = 1


    #        -- GROUP_CONCAT(DISTINCT e.eventType_id SEPARATOR ',') as eventType_id, \
    #        -- IF(e.speciality_id, GROUP_CONCAT(DISTINCT e.speciality_id SEPARATOR ','), 0) as speciality_id, \

    sql_field_string    = service_code
    sql_field_string    = service_name
    sql_field_string    = at_code
    sql_field_string    = at_name

    sql_attr_uint       = price_list_item_id
    sql_attr_uint       = service_id
    sql_attr_uint       = action_type_id
    sql_attr_float      = price
    sql_attr_uint       = is_accumulative_price
    sql_attr_uint       = is_complex_service
    sql_attr_uint       = is_at_lab
    sql_attr_uint       = pricelist_id

#       sql_attr_multi     = uint eventType_id from field
#       sql_attr_multi     = uint speciality_id from field

}


index event_service
{
    source                  = event_service
    path                    = /var/lib/sphinxsearch/data_{{ deployment.prefix }}/event_service
    docinfo                 = extern
    charset_type            = utf-8
    min_word_len            = 2
    min_prefix_len           = 2

    charset_table = 0..9, A..Z->a..z, _, a..z, U+2E, \
    U+410..U+42F->U+430..U+44F, U+430..U+44F, U+401->U+451, U+451
}


source events
{
    type        = {{ common.sphinx.DB_TYPE }}

    sql_host    = {{ common.sphinx.DB_HOST }}
    sql_user    = {{ common.sphinx.DB_USER }}
    sql_pass    = {{ common.sphinx.DB_PASSWORD }}
    sql_db      = {{ common.sphinx.DB_NAME }}
    sql_port    = {{ common.sphinx.DB_PORT }}

    #       sql_query_pre = SET CHARACTER_SET_RESULTS=utf8
    sql_query_pre = SET NAMES utf8
    sql_query_pre = SET CHARACTER SET utf8

    sql_query = \
    SELECT \
    Event.id, \
    Event.externalId as external_id, \
    CONCAT_WS(' ', Client.lastName, Client.firstName, Client.patrName) as client_name, \
    Client.id as client_code, \
    Client.birthDate as client_bd, \
    Event.setDate as event_date \
    FROM \
    Event \
    LEFT JOIN Person ON Person.id = Event.execPerson_id \
    JOIN EventType ON Event.eventType_id = EventType.id \
    JOIN rbRequestType ON EventType.requestType_id = rbRequestType.id \
    JOIN Client on Client.id = Event.client_id \
    WHERE Event.deleted = 0 \
    GROUP BY Event.id

    sql_field_string      = external_id
    sql_field_string      = client_code
    sql_field_string      = client_name
    sql_field_string      = client_bd

    sql_attr_string       = event_date
}


index events
{
    source                  = events
    path                    = /var/lib/sphinxsearch/data_{{ deployment.prefix }}/events
    docinfo                 = extern
    charset_type            = utf-8
    min_word_len            = 2
    min_prefix_len          = 2

    charset_table = 0..9, A..Z->a..z, _, /, a..z, U+2E, \
    U+410..U+42F->U+430..U+44F, U+430..U+44F, U+401->U+451, U+451
}



source risar_events
{
    type        = {{ common.sphinx.DB_TYPE }}

    sql_host    = {{ common.sphinx.DB_HOST }}
    sql_user    = {{ common.sphinx.DB_USER }}
    sql_pass    = {{ common.sphinx.DB_PASSWORD }}
    sql_db      = {{ common.sphinx.DB_NAME }}
    sql_port    = {{ common.sphinx.DB_PORT }}

    #       sql_query_pre = SET CHARACTER_SET_RESULTS=utf8
    sql_query_pre = SET NAMES utf8
    sql_query_pre = SET CHARACTER SET utf8

    sql_query               = \
    SELECT\
    Event.id,\
    Event.externalId AS external_id,\
    Event.execPerson_id AS exec_person_id,\
    Event.client_id AS client_id,\
    UNIX_TIMESTAMP(DATE(Event.setDate)) AS set_date,\
    UNIX_TIMESTAMP(Event.modifyDatetime) AS modify_date,\
    UNIX_TIMESTAMP(DATE(Event.execDate)) AS exec_date,\
    Person.org_id AS org_id,\
    Organisation.shortName AS org_name,\
    CAST(LEFT(Organisation.area, 8) AS UNSIGNED) AS AREA,\
    CONCAT_WS(' ', Client.lastName, Client.firstName, Client.patrName) AS NAME,\
    GROUP_CONCAT(DISTINCT CONCAT_WS(' ', ClientDocument.serial, ClientDocument.number) SEPARATOR '; ') AS document,\
    rbDocumentType.name AS document_type,\
    GROUP_CONCAT(DISTINCT CONCAT_WS(' ', rbPolicyType.name, ClientPolicy.serial, ClientPolicy.number) SEPARATOR '; ') AS policy,\
    Client.SNILS AS snils,\
    DATE_FORMAT(Client.birthDate, '%d.%m.%Y') AS birth_date,\
    Client.age AS client_age,\
    apv_wg.value AS client_work_code,\
    CONCAT_WS(' ', Person.lastName, Person.firstName, Person.patrName) AS person_name,\
    apv_risk.value AS risk,\
    UNIX_TIMESTAMP(DATE(apv_bdate.value)) DIV 86400 AS bdate,\
    UNIX_TIMESTAMP(DATE(apv_psdate.value)) DIV 86400 AS psdate,\
    UNIX_TIMESTAMP(DATE(apv_modify_date.value)) DIV 86400 AS card_modify_date,\
    GROUP_CONCAT(UNIX_TIMESTAMP(DATE(checkup.begDate)) DIV 86400 SEPARATOR ',') AS checkups,\
    rbRequestType.id as request_type_id\
    FROM\
    Event\
    JOIN Person ON Person.id = Event.execPerson_id\
    JOIN EventType ON (Event.eventType_id = EventType.id)\
    JOIN rbRequestType ON (EventType.requestType_id = rbRequestType.id AND rbRequestType.code IN ('pregnancy', 'gynecological'))\
    JOIN (SELECT *, FLOOR(DATEDIFF(CURDATE(), Client.birthDate) / 365.25) AS age FROM Client) AS Client ON Client.id = Event.client_id\
    LEFT JOIN Organisation ON Organisation.id = Person.org_id\
    LEFT JOIN ClientPolicy ON (ClientPolicy.client_id = Client.id AND ClientPolicy.deleted = 0)\
    LEFT JOIN rbPolicyType ON (ClientPolicy.policyType_id = rbPolicyType.id)\
    LEFT JOIN ClientDocument ON (ClientDocument.client_id = Client.id AND ClientDocument.deleted = 0)\
    LEFT JOIN rbDocumentType ON ClientDocument.documentType_id = rbDocumentType.id\
    LEFT JOIN rbDocumentTypeGroup ON (rbDocumentType.group_id = rbDocumentTypeGroup.id AND rbDocumentTypeGroup.code = '1')\
    LEFT JOIN Action CA ON (\
    CA.event_id = Event.id AND\
    CA.actionType_id IN (SELECT id FROM ActionType WHERE ActionType.flatCode = 'cardAttributes') AND\
    CA.deleted = 0)\
    LEFT JOIN Action anmz ON (\
        anmz.event_id = Event.id AND\
        anmz.actionType_id IN (SELECT id FROM ActionType WHERE ActionType.flatCode = 'risar_mother_anamnesis') AND\
        anmz.deleted = 0)\
    LEFT JOIN ActionPropertyType apt_wg ON (apt_wg.actionType_id = anmz.actionType_id AND apt_wg.code = 'work_group')\
    LEFT JOIN ActionProperty ap_wg ON (ap_wg.action_id = anmz.id AND ap_wg.type_id = apt_wg.id)\
    LEFT JOIN ActionProperty_ExtRef apv_wg ON (ap_wg.id = apv_wg.id)\
    LEFT JOIN ActionPropertyType apt_risk ON (apt_risk.actionType_id = CA.actionType_id AND apt_risk.code = 'prenatal_risk_572')\
    LEFT JOIN ActionProperty ap_risk ON (ap_risk.action_id = CA.id AND ap_risk.type_id = apt_risk.id)\
    LEFT JOIN ActionProperty_Integer apv_risk ON (ap_risk.id = apv_risk.id)\
    LEFT JOIN ActionPropertyType apt_bdate ON (apt_bdate.actionType_id = CA.actionType_id AND apt_bdate.code = 'predicted_delivery_date')\
    LEFT JOIN ActionProperty ap_bdate ON (ap_bdate.action_id = CA.id AND ap_bdate.type_id = apt_bdate.id)\
    LEFT JOIN ActionProperty_Date apv_bdate ON (ap_bdate.id = apv_bdate.id)\
    LEFT JOIN ActionPropertyType apt_psdate ON (apt_psdate.actionType_id = CA.actionType_id AND apt_psdate.code = 'pregnancy_start_date')\
    LEFT JOIN ActionProperty ap_psdate ON (ap_psdate.action_id = CA.id AND ap_psdate.type_id = apt_psdate.id)\
    LEFT JOIN ActionProperty_Date apv_psdate ON (ap_psdate.id = apv_psdate.id)\
    LEFT JOIN ActionPropertyType apt_modify_date ON (apt_modify_date.actionType_id = CA.actionType_id AND apt_modify_date.code = 'chart_modify_date')\
    LEFT JOIN ActionProperty ap_modify_date ON (ap_modify_date.action_id = CA.id AND ap_modify_date.type_id = apt_modify_date.id)\
    LEFT JOIN ActionProperty_Date apv_modify_date ON (ap_modify_date.id = apv_modify_date.id)\
    LEFT JOIN Action checkup ON (\
    checkup.event_id = Event.id AND\
    checkup.actionType_id IN (SELECT id FROM ActionType WHERE flatCode IN ('risarFirstInspection', 'risarSecondInspection')) AND\
    checkup.deleted = 0)\
    WHERE Event.deleted = 0\
    GROUP BY Event.id


    sql_field_string        = name
    sql_field_string        = document
    sql_field_string        = policy
    sql_field_string      = client_work_code

    sql_attr_string        = org_name
    sql_attr_string        = person_name
    sql_attr_uint        = modify_date
    sql_attr_uint        = set_date
    sql_attr_uint        = exec_date
    sql_attr_uint        = bdate
    sql_attr_uint        = psdate
    sql_attr_uint        = card_modify_date
    sql_attr_uint        = risk
    sql_attr_uint        = client_id
    sql_attr_string      = external_id
    sql_attr_uint        = exec_person_id
    sql_attr_uint        = org_id
    sql_attr_multi       = uint checkups from field
    sql_attr_uint      = area
    sql_attr_string      = snils
    sql_attr_string      = birth_date
    sql_attr_uint      = client_age
    sql_attr_string      = document_type
    sql_attr_uint        = request_type_id

}


index risar_events
{
    source                  = risar_events
    path                    = /var/lib/sphinxsearch/data_{{ deployment.prefix }}/risar_events
    docinfo                 = extern
    charset_type            = utf-8
    min_word_len            = 2
    min_prefix_len          = 2

    charset_table = 0..9, A..Z->a..z, _, a..z, U+2E, \
    U+410..U+42F->U+430..U+44F, U+430..U+44F, U+401->U+451, U+451
}

indexer
{
    mem_limit       = 32M
}


searchd
{
    listen          = {{ common.sphinx.SPHINXQL_PORT }}:mysql41
    log             = {{ deployment.base_dir }}/logs/{{ this.name }}_searchd.log
    query_log       = {{ deployment.base_dir }}/logs/{{ this.name }}_query.log
    read_timeout    = 5
    max_children    = 30
    pid_file        = {{ deployment.base_dir }}/sphinx/{{ this.name }}.pid
    max_matches     = 10000
    seamless_rotate = 1
    preopen_indexes = 1
    unlink_old      = 1
    workers         = threads # for RT to work
    binlog_path     = /var/lib/sphinxsearch/data_{{ deployment.prefix }}
}
